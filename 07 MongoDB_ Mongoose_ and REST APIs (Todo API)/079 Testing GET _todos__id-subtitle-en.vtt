WEBVTT

00:00.500 --> 00:04.310
In this video we're going to create three test cases for this route.

00:04.330 --> 00:09.010
The one that fetches an individual to do Item one is going to make sure that when we pass in an invalid

00:09.010 --> 00:15.190
object id we get a for a for another one is going to verify that when we pass in a valid object id but

00:15.190 --> 00:16.390
it doesn't match a doc.

00:16.420 --> 00:17.760
We get a 404 back.

00:17.860 --> 00:23.560
And lastly we'll write a test case that makes sure when we pass in an object ID that does match a doc

00:23.620 --> 00:30.370
that Doc actually comes back in the response body we're going to write the test case for the valid call

00:30.370 --> 00:31.100
together.

00:31.180 --> 00:36.880
Then you'll be writing these two test cases on your own that will be the challenge for this video over

00:36.880 --> 00:38.610
inside of server test.

00:38.770 --> 00:44.100
Yes we can get started down at the very bottom by adding a describe block right here.

00:44.440 --> 00:52.380
I'm going to call the scrub and this describe block will be named get forward slash to Doo's a forward

00:52.380 --> 00:59.450
slash colon ID and we can at our aero function as the callback function inside of our describe call

00:59.450 --> 00:59.790
back.

00:59.780 --> 01:02.490
We can now set up the test case that we're going to create together.

01:02.610 --> 01:07.540
It should return to do doc.

01:07.560 --> 01:12.360
This is going to be the test that makes sure when we pass in a valid ID that does match a doc the Doc

01:12.360 --> 01:13.590
comes back.

01:13.590 --> 01:19.120
It's going to be an asynchronous test so we will be specifying the Done argument right here.

01:19.140 --> 01:24.630
Now in order to run this test case we're going to need the ID of a to do that is actually inside of

01:24.630 --> 01:25.490
the collection.

01:25.620 --> 01:30.780
And if you remember we do add two to dues to the collection but unfortunately we don't have the IDs

01:30.780 --> 01:31.230
here.

01:31.290 --> 01:35.140
The Ids are auto generated behind the scenes in order to fix this.

01:35.160 --> 01:39.750
What we're going to do is add the id property underscore ID.

01:39.810 --> 01:45.660
This means we'll be able to access the ID in our test case and everything will work as expected.

01:45.660 --> 01:51.360
Now in order to do this we do have to load an object id off of Mongo D-B which we've done before.

01:51.360 --> 01:55.290
I'm going to make a constant using E-S six the destructuring.

01:55.500 --> 02:02.440
I'm going to grab object id off of the return result from requiring Mongo D.

02:02.620 --> 02:03.480
B.

02:03.630 --> 02:11.070
Now right here inside of the array we can add an id property for both of our to Dewes new object ID

02:11.640 --> 02:12.380
with a comma.

02:12.530 --> 02:18.360
This is for the first to do and a down below we can add an ID for the second to to do as well.

02:18.360 --> 02:20.700
New Object I.

02:20.760 --> 02:21.370
D.

02:21.420 --> 02:22.190
Excellent.

02:22.410 --> 02:28.200
Now that we have ideas and we can access those IDs by accessing them off the to do's array we're ready

02:28.200 --> 02:31.800
to write the test case down below inside of this test case.

02:31.800 --> 02:35.720
We're going to get started by creating our super test request.

02:35.820 --> 02:40.500
We're going to request something from the app express application.

02:40.500 --> 02:41.950
It is going to be a get request.

02:41.970 --> 02:48.480
That is the you are Alwar testing and the actual You are L is going to be a forward slash to Doo's forward

02:48.480 --> 02:53.640
slash ID where the ID equals one of these IDs up above.

02:53.640 --> 02:58.440
I'm going to go ahead and use the ID of the first to do down below.

02:58.440 --> 03:05.010
We can fix this by changing our string to a template string so we can inject the ID forward slash to

03:05.010 --> 03:10.780
Doo's forward slash and then we're going to add our syntax for injecting a value into the template string.

03:10.860 --> 03:13.920
In this case we're accessing something from the Duzer.

03:14.460 --> 03:20.990
We want to grab the first item this is the first to do and we're looking for it's underscore ideal property.

03:21.000 --> 03:25.410
Now this is an object idea we need to convert this into a string because that is what we're going to

03:25.410 --> 03:29.450
pass in as the you are able to convert an object ID to a string.

03:29.490 --> 03:34.230
We can use the two hex string method.

03:34.230 --> 03:35.100
There we go.

03:35.100 --> 03:40.650
Now we've generated the proper ID and we can start making some assertions about what should happen when

03:40.650 --> 03:42.610
this request gets fired.

03:42.660 --> 03:46.880
First up the HTP status code that should be a 200.

03:46.980 --> 03:51.160
So I can call expect right here passing in 200.

03:51.180 --> 03:57.150
Next up we do want to verify that the body that comes back matches the body up above.

03:57.150 --> 04:01.570
Most notably that the text property equals the text property we set.

04:01.650 --> 04:05.670
I'm going to create a custom expect call right here to get that done.

04:05.760 --> 04:09.460
We'll pass in our function that gets called with the response object.

04:09.570 --> 04:13.990
And now we can make an assertion using the expect library.

04:14.110 --> 04:23.970
I'm going to expect that the response body has to do property which we set up right here when we use

04:23.970 --> 04:26.110
the 6 object's syntax.

04:26.400 --> 04:33.900
And that to do property has a text property that equals using to be the text property of our first to

04:33.900 --> 04:34.480
do.

04:34.740 --> 04:39.660
That's going to be to Doo's grabbing the first one the zero indexed to do.

04:39.660 --> 04:43.880
And we're going to grab its text property with this in place.

04:43.890 --> 04:45.410
All of our assertions are done.

04:45.420 --> 04:50.720
We can call and passing in done which is going to wrap up the test case.

04:50.730 --> 04:57.600
Now we can go ahead and run this test over inside of the terminal by running NPM run test hyphen watch.

04:57.910 --> 05:02.400
This is going to kick off our test suite and we should have our new section with our test case that

05:02.460 --> 05:03.510
is passing.

05:03.630 --> 05:09.470
Right here we get should return to do dock and that is passing which is fantastic.

05:09.480 --> 05:13.100
Now it's time for you to write two test cases on your own.

05:13.110 --> 05:14.530
I'll give you the calls.

05:14.550 --> 05:19.560
So we're on the same page there but you are going to be responsible for filling out the actual test

05:19.800 --> 05:21.220
function.

05:22.420 --> 05:32.250
Should return a 404 if you do not found this is going to be an sink test so will specify the done argument

05:32.470 --> 05:38.770
and your job inside of here is going to be to make a request using a real object I.D. and you're going

05:38.770 --> 05:41.270
to college to hex string method.

05:41.320 --> 05:46.750
That means you're going to call the method we have here and you're going to call new object ID to make

05:46.750 --> 05:47.530
a new one.

05:47.550 --> 05:50.550
It is going to be a valid ID but it won't be found in the collection.

05:50.550 --> 05:52.520
So we should get a 404 back.

05:52.540 --> 05:56.140
Now the only expectation you need to set up is the status code.

05:56.140 --> 06:04.560
Make sure make sure you get a 404 back.

06:04.560 --> 06:09.510
Now the second test you're going to write is going to verify that when we have an invalid ID we get

06:09.510 --> 06:11.160
back a 404.

06:11.160 --> 06:19.020
It should return 404 for non object IDs.

06:19.190 --> 06:21.300
This is also going to be an async test.

06:21.320 --> 06:26.770
So we'll specify done right here for this one you're going to pass in a u r l something like this.

06:26.900 --> 06:31.020
Forward slash to Doo's forward slash One two three.

06:31.040 --> 06:32.340
This is indeed a valid.

06:32.360 --> 06:33.090
You are out.

06:33.110 --> 06:38.840
But when we try to convert one to three to an object ID it's going to fail that should trigger the code

06:38.840 --> 06:43.820
right here and we should get a 404 back once again and the only expectation you need to set up for this

06:43.820 --> 06:50.100
test is that when you make the request to the you R-AL of 404 is the status code.

06:50.150 --> 06:56.600
Take a moment to knock out both of these test cases making sure they work as expected when you actually

06:56.600 --> 06:57.890
have the calls set up.

06:57.890 --> 07:02.510
If all of your test cases are passing over in the terminal when you're done then you are ready to move

07:02.510 --> 07:03.050
on.

07:03.080 --> 07:10.340
Take a moment to knock this out pause the video and when you're done click play.

07:10.340 --> 07:10.900
All right.

07:10.940 --> 07:15.610
Hopefully you didn't have too much trouble getting these calls set up for the first one.

07:15.620 --> 07:19.940
I'm going to go ahead and get that hex string by creating a variable.

07:19.940 --> 07:23.500
Now you didn't need to create a variable you could have done it slightly differently.

07:23.810 --> 07:32.330
I'm going to make a variable called hex ID sending an equal to a new object ID.

07:32.370 --> 07:37.850
Now on this object id we do want to call that two hex string method which we used above.

07:37.860 --> 07:43.520
This takes our object id and gives us a string and we can specify that string as part of the U r l.

07:43.560 --> 07:45.990
Now it's fine if you did this inside of the call.

07:45.990 --> 07:47.300
Kind of like we do up here.

07:47.340 --> 07:51.600
Either way works as long as the test case passes right here.

07:51.780 --> 07:54.980
We're going to call request passing in our app.

07:54.990 --> 07:57.410
Next up we are going to make a get request.

07:57.420 --> 08:00.980
So I'll call that get method and we can set up r u r l.

08:01.200 --> 08:06.210
This one is going to be forward slash to Doo's forward slash and we're going to inject in our template

08:06.210 --> 08:09.590
string that Hex ID value.

08:09.600 --> 08:13.550
Now the only expectation we need to set up is that a 404 comes back.

08:13.740 --> 08:15.270
We're expecting a 4.

08:15.270 --> 08:22.400
0 4 we can wrap this test case up by calling and passing in our Done function.

08:22.410 --> 08:27.660
Now we can save the file on this test case should rerun the last test is still going to fail but that's

08:27.660 --> 08:28.230
fine.

08:28.230 --> 08:34.410
And over here you can see we get exactly that should return to Dudack passes should return 4 or 4 if

08:34.450 --> 08:40.780
to do not found passes in the last test to write is what happens when we have an invalid object ID.

08:41.250 --> 08:46.830
I'm going to call Everquest passing an app and then I'm going to go ahead and call get setting up the

08:46.950 --> 08:47.680
R L.

08:47.730 --> 08:52.260
We don't need to use template strings here since we're just going to be passing in a plain straight

08:52.710 --> 08:55.020
forward slash to Doo's forward slash.

08:55.050 --> 08:57.870
One two three ABC indeed.

08:57.930 --> 09:00.760
An invalid object id the object ID.

09:00.780 --> 09:05.610
As we talked about have a very specific structure and this does not pass that criteria to find out more

09:05.610 --> 09:06.840
about object IDs.

09:06.870 --> 09:12.170
You can always go back to the object id video in the beginning of this section right here.

09:12.210 --> 09:18.240
We're going to start setting up our assertions by calling expect and expecting a 404 comes back and

09:18.240 --> 09:25.260
we can wrap this test up by calling the end method and passing in done with this in place our test suite

09:25.290 --> 09:28.380
forget to use by ID is complete.

09:28.470 --> 09:32.280
Over in the terminal it just reran and all of the test cases passed.

09:32.280 --> 09:34.430
And this is fantastic.

09:34.470 --> 09:38.510
We don't have a complete test suite set up for the route which means we are done.

09:38.640 --> 09:44.430
And if the data comes back incorrectly for example if the body data has an extra character appended

09:44.700 --> 09:50.520
like the character one the test cases are going to fail everything is working really really well.

09:50.550 --> 09:55.760
The last thing left to do is commit our changes over inside of the terminal I'm going to shut down and

09:55.780 --> 10:01.770
node man and run it get status here the only changes we have are changes to the server test file which

10:01.770 --> 10:08.250
is a modified file get is already tracking it which means I can use get commit with the AM flag or the

10:08.280 --> 10:18.670
combined am flag providing a message add test cases for get to Dewes by ID.

10:18.670 --> 10:22.930
I'm going to make the commit and push it up to get up in the next video we're going to switch things

10:22.930 --> 10:27.030
up a little bit instead of continuing on adding new routes which we will do a little later.

10:27.040 --> 10:32.950
We are going to deploy our application to Heroku using a real world Mongo DB database.

10:32.950 --> 10:35.610
That means all the calls we're making in post man we can make.

10:35.620 --> 10:41.370
But to a real server and anybody can make those calls not just people on our local machine because the

10:41.500 --> 10:46.660
RL will no longer be a local host that is coming up next I am super excited to show you how to set up

10:46.660 --> 10:48.550
Heroku with Mongo D-B.

10:48.550 --> 10:49.250
Stay tuned.

10:49.260 --> 10:50.600
We'll see you then
