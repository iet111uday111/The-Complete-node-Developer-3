WEBVTT

00:00.450 --> 00:05.880
In this video you're going to create your HTP post route for adding new to do's.

00:05.880 --> 00:10.730
Before we dive into that we're going to take a quick second to refactor everything we have in server

00:11.130 --> 00:12.970
because it doesn't really belong here.

00:13.050 --> 00:17.940
We have database configuration stuff which should live somewhere else and we have our models which should

00:17.940 --> 00:20.000
also live in separate files.

00:20.010 --> 00:26.670
The only thing we want in server G-S is our express route handlers to get started inside of the server

00:26.670 --> 00:32.670
directory we're going to make a new folder called D-B and inside of the DB folder we'll make a file

00:32.670 --> 00:35.410
where all of this mongoose configuration happens.

00:35.490 --> 00:41.080
I'm going to call that file mongoose dot Yes.

00:41.320 --> 00:47.360
And don't we need to do is take our mongoose configuration code right here cut it out and move it over

00:47.360 --> 00:48.490
into mongoose.

00:48.560 --> 00:49.410
Jay Yes.

00:49.460 --> 00:51.380
Now we do need to export something.

00:51.440 --> 00:54.330
What we're going to export is the mongoose variable.

00:54.350 --> 00:59.330
So essentially when someone requires this file they're going to have mongoose configured and they're

00:59.330 --> 01:00.530
going to get it back.

01:00.590 --> 01:05.540
They're going to get back the mongoose variable that comes from the library right here.

01:05.540 --> 01:14.600
I'm going to set module exports equal to an object and that object will set mongoose equal to mongoose.

01:14.600 --> 01:20.840
Now as we know in Essex this can be simplified if you have a property and a variable with the same name

01:20.840 --> 01:25.460
and you can shorten it and we can take things a step further and put it all on one line.

01:25.460 --> 01:26.310
Excellent.

01:26.360 --> 01:32.400
And now we have the mongoose configuration in a separate file and that file can be required right here.

01:32.420 --> 01:37.200
I'm going to pull off the mongoose property using E.S. 6 destructuring.

01:37.340 --> 01:43.730
Essentially we're creating a local variable called mongoose equal to the mongoose property on the object

01:44.180 --> 01:50.570
and that object is going to be the return result from requiring the file we just created that's in the

01:50.570 --> 01:59.080
DV directory and it's called mongoose dot JSM we can leave off that extension.

01:59.810 --> 02:03.550
Now that mongoose lives in its own place let's do the same thing for to do.

02:03.650 --> 02:10.810
And user this is going to happen in a new folder in server called models inside of models.

02:10.830 --> 02:14.210
We're going to create two files one for each model.

02:14.360 --> 02:16.750
I'm going to make a new file called to do.

02:16.940 --> 02:17.920
Yes.

02:18.320 --> 02:22.500
And a new file inside of models called user Dot.

02:22.530 --> 02:23.210
Yes.

02:23.300 --> 02:30.640
And we can take the models from here and simply copy and paste them in to their appropriate files.

02:30.830 --> 02:33.430
Once the model is copied we can remove it from server.

02:33.490 --> 02:40.490
Yes I'm going to do the same thing with user copying it into user J S and removing it from here.

02:40.490 --> 02:42.760
Now I'm also going to remove everything we have so far.

02:42.830 --> 02:45.400
All of these examples aren't necessary any more.

02:45.470 --> 02:50.180
We can simply leave our mongoose imports statement up at the top.

02:50.180 --> 02:53.480
Now inside of these model files there are a few things we need to do.

02:53.480 --> 02:55.360
First up we call mongoose model.

02:55.370 --> 02:57.940
So we still need to load in mongoose.

02:57.950 --> 03:03.390
Now we don't have to load in the mongoose J.S. file we created it we can load in the plain old library.

03:03.710 --> 03:06.710
Let's make a variable call that variable.

03:06.710 --> 03:16.220
Mongoose and we're going to require Monkees and the last thing we need to do is export the model otherwise

03:16.220 --> 03:19.310
we can't use it in files that require this one.

03:19.310 --> 03:26.930
I'm going to set module exports equal to an object and we'll set the deed to do property equal to that

03:26.930 --> 03:28.010
to do variable.

03:28.010 --> 03:30.370
This is exactly what we did over in mongoose.

03:30.370 --> 03:33.620
Jay Yes and we're going to do the exact same thing in a user.

03:33.710 --> 03:34.410
Yes.

03:34.580 --> 03:36.990
Inside of user J s up at the top.

03:37.840 --> 03:45.880
We'll create a variable called the mongoose acquiring and mongoose and at the bottom will export the

03:45.880 --> 03:53.780
user model module DOD exports setting an equal to an object where a user equals user.

03:53.830 --> 03:54.420
Awesome.

03:54.540 --> 03:57.920
And now all three of our files have been formatted.

03:57.940 --> 04:00.010
We have three new files and our one old one.

04:00.040 --> 04:03.220
The last thing I have to do is load in to do end user.

04:03.430 --> 04:14.550
Let's make a variable using destructuring called to do setting an equal to require models forward slash

04:14.820 --> 04:20.730
to do and we can do the exact same thing for user using ESX destructuring we're going to pull off that

04:20.730 --> 04:21.980
user variable.

04:22.140 --> 04:29.010
And we're getting it from the object that comes back from a call to require requiring models of board

04:29.010 --> 04:30.720
slash user.

04:31.140 --> 04:32.010
Excellent.

04:32.040 --> 04:35.460
With this in place we are now ready to get going.

04:35.460 --> 04:40.350
We have the exact same set up only it's been refactored and this is going to make it a lot easier to

04:40.350 --> 04:46.680
test update and manage the server just as file is just going to be responsible for our routes and to

04:46.680 --> 04:49.210
get started we're going to need to install Express.

04:49.290 --> 04:50.780
We've already done that in the past.

04:50.820 --> 04:58.020
So over in the terminal all we need to do is run p.m.-I followed by the module name which is express

04:58.210 --> 05:04.200
will be using the most recent version for point fourteen point zero and we're also going to be installing

05:04.200 --> 05:09.240
a second module and we can actually type that right after the first one there's no need to run NPM installed

05:09.240 --> 05:10.080
twice.

05:10.080 --> 05:17.290
This one is called The Body hyphen parser a body parser is going to let us send Jason to the server.

05:17.340 --> 05:20.190
The server can then take that Jason and do something with it.

05:20.250 --> 05:23.390
Body parser essentially parses the body.

05:23.490 --> 05:28.380
It takes that string body and turns it into a javascript object.

05:28.400 --> 05:31.120
Now body parser with an R on the end.

05:31.230 --> 05:37.490
We're going to be installing the version 1 pt. 1 5 point to the most recent version.

05:37.500 --> 05:43.290
I'm also going to provide the save flag which is going to add both express and body parser to the dependencies

05:43.290 --> 05:45.380
section of packaged Jason.

05:45.420 --> 05:47.600
Now I can go ahead and fire off this request.

05:47.610 --> 05:50.560
Installing both modules and over inside of server.

05:50.580 --> 05:53.510
Yes we can start configuring our app.

05:53.730 --> 05:58.770
First up we have to load in those two modules we just installed as I mentioned to like to keep a space

05:58.770 --> 06:02.860
between local imports and library imports right here.

06:03.000 --> 06:11.040
I'm going to use a variable called Express to store the Express library require Express and we're going

06:11.040 --> 06:17.130
to do the same thing for body parts for a variable called Body parser setting and equal to the return

06:17.130 --> 06:22.130
result from requiring a body hyphen parser.

06:22.230 --> 06:27.180
Now that we have this in place we can set up a very basic application like we did earlier in the course

06:27.580 --> 06:29.700
we're going to make a variable called app.

06:29.700 --> 06:32.560
This is going to store our express application.

06:32.880 --> 06:37.180
I'm going to set this equal to a call to express nothing new here.

06:37.260 --> 06:41.360
And we're also going to call app dot listen listening on a port.

06:41.400 --> 06:44.070
Now we will be deploying this to Heroku eventually.

06:44.070 --> 06:49.940
For now though we're going to have a local port Port 3000 and we'll provide a callback function that's

06:49.940 --> 07:00.040
going to fire once the app is up and all we're going to do is use console log to print started on port

07:00.430 --> 07:02.040
three thousand.

07:02.170 --> 07:03.190
Excellent.

07:03.190 --> 07:06.190
Now that we have this in place we have a very basic server.

07:06.250 --> 07:08.900
All we have to do is start configuring our routes.

07:08.920 --> 07:13.720
And as I promised the one we're going to be focusing on in this video is the post route.

07:13.720 --> 07:18.630
This is going to let us create new to do's now inside of your rest API.

07:18.640 --> 07:25.420
There's the basic crud operations crud being create read update and delete when you want to create a

07:25.420 --> 07:26.100
resource.

07:26.110 --> 07:31.780
You use the post HTP method and you send that resource as the body.

07:31.780 --> 07:36.880
This means that when we want to make a new to do it we're going to send a Jasen object over to the server.

07:37.000 --> 07:41.590
It's going to have a text property and the server is going to get that text property create the new

07:41.590 --> 07:49.030
model and send the complete model with the id the completed property and completed at back to the client

07:49.570 --> 07:50.540
to set up a route.

07:50.760 --> 07:57.790
We need to call app dot post passing in the two arguments we've used for every single express route.

07:57.820 --> 08:05.880
R U R L and R callback function that gets called with the request and response objects.

08:05.950 --> 08:11.740
Now that you are L4 of ISAPI is really important and there is a lot of talk about the proper structure

08:12.010 --> 08:13.240
for resources.

08:13.240 --> 08:17.020
What I like to do is use a forward slash to do's.

08:17.020 --> 08:22.430
This is for resource creation and this is a pretty standard set up forward slash to do.

08:22.450 --> 08:29.200
As for creating a new to do later on when we want to read to do's we'll use the get method and we will

08:29.200 --> 08:35.920
get from a forward slash to do's to get all to Doo's or forward slash to Doo's some crazy number to

08:35.920 --> 08:38.710
get individual to do by its ID.

08:38.710 --> 08:42.430
This is a very common pattern it's the one we're going to be using here.

08:42.640 --> 08:48.430
For now though we can focus on getting body data that got sent from the client to do this.

08:48.430 --> 08:50.980
We have to use that body parser module.

08:51.010 --> 08:56.170
As I said body parser is going to take your Jason and convert it into an object attaching it onto this

08:56.170 --> 08:57.640
request object.

08:57.640 --> 09:02.920
Right here we're going to configure the middleware using app use which we used earlier inside of our

09:02.920 --> 09:08.560
express section as we know app use takes the middle where if we're writing custom middleware it will

09:08.560 --> 09:14.920
be a function if we're using third party middleware we usually just access something off of the library.

09:14.920 --> 09:21.550
In this case it's going to be body parser dot Jason getting called as a function of the return value

09:21.550 --> 09:27.880
from this Jason method is a function and that is the middleware that we need to give to express.

09:27.880 --> 09:32.480
With this in place we can now send Jason to our express application.

09:32.530 --> 09:40.480
What I'd like to do inside of the post callback is simply Consul a log in the value of request dot body

09:40.660 --> 09:44.080
where the body gets store to buy body parser.

09:44.080 --> 09:50.190
With this in place we can now start up a server and test things out inside a postman over in the terminal.

09:50.230 --> 09:56.830
I'm going to use clear to clear the terminal output and then I'll run the app node server server.

09:56.830 --> 10:03.940
Dhananjay Yes the server is up on port 3000 which means now we can head into post man now inside of

10:03.940 --> 10:08.680
post man we're not going to be making a get request like we did in the previous video and this time

10:08.680 --> 10:13.630
what we're going to be doing is making a post request which means we need to change the HTP method to

10:13.630 --> 10:16.630
post and type the you are Allen right here.

10:16.630 --> 10:22.470
That's going to be localhost Kallen 3000 for the port forward slash dues.

10:22.660 --> 10:25.860
This is that you are all that we want to send our data to.

10:25.930 --> 10:31.090
Now in order to send some data to the application we have to go to this body tab.

10:31.090 --> 10:32.650
We're trying to send Jason data.

10:32.710 --> 10:37.800
So we're going to go to Raw and select Jason from the dropdown list on the right hand side.

10:37.810 --> 10:39.150
Now we have our Hetter set.

10:39.160 --> 10:41.750
You can see there's one letter showing up right here.

10:41.770 --> 10:47.050
This is the Content-Type header letting the server know that Jason is getting sent all of this is done

10:47.050 --> 10:50.530
automatically with postman inside of here.

10:50.530 --> 10:55.180
The only piece of information I'm going to attach to my Jason is a text property.

10:55.240 --> 10:58.800
This is from post man.

10:58.810 --> 11:02.560
Now that we have this in place we can click send to fire off our request.

11:02.590 --> 11:06.630
We're never going to get a response because we haven't responded to it inside of server.

11:06.720 --> 11:11.060
Yes but if I head over to the terminal right here you see we have our data.

11:11.170 --> 11:17.730
This is the data we created inside a post man it's now showing up in our node application which is fantastic.

11:17.890 --> 11:23.560
We are one step closer to actually creating that to do the only thing left to do inside of the post

11:23.560 --> 11:29.680
handler is actually create that to do using the information that comes from the user.

11:29.680 --> 11:36.040
Let's make a variable called to do to do the thing we've done previously creating an instance of a mongoose

11:36.100 --> 11:37.160
model.

11:37.300 --> 11:43.990
We're going to set it equal to new to do passing in our object and passing in the values we want to

11:43.990 --> 11:44.610
set.

11:44.680 --> 11:47.260
In this case we just want to set text.

11:47.260 --> 11:52.040
We're going to set text to request dot body which is the object we have here.

11:52.150 --> 11:56.350
And then we're going to access that text property like this.

11:56.350 --> 11:58.710
Next up we're going to call to do dot save.

11:58.750 --> 12:02.290
This is going to actually save the model to the database.

12:02.290 --> 12:11.420
And we are going to be providing a callback for a success case and for the error case awesome.

12:11.430 --> 12:15.930
Now if things go well we're going to be sending back the actual to do which is going to show up right

12:15.930 --> 12:16.600
here.

12:16.680 --> 12:22.110
I'm going to get the document and right here inside of the callback function I'm going to use response

12:22.140 --> 12:25.260
dot send to send the doc back.

12:25.260 --> 12:31.020
This is going to give the user really important information things like the ID and the completed and

12:31.020 --> 12:34.950
completed at properties which were not set by the user.

12:34.950 --> 12:37.970
If things go poorly and we get an error that's fine too.

12:38.100 --> 12:43.510
All we're going to do is use response send to send that error back.

12:43.530 --> 12:46.420
Now we'll be modifying how we send errors back a little later.

12:46.440 --> 12:49.350
For now this code is going to work just great.

12:49.350 --> 12:56.400
We can also set an HTP status if you remember HTP statuses but you give someone some information about

12:56.400 --> 12:57.240
how their request.

12:57.240 --> 13:00.600
When did it go well did it go poorly all that sort of thing.

13:00.840 --> 13:10.000
You can get a list of all the HTP statuses available to you by going to HTP statuses dot com.

13:10.020 --> 13:12.790
Here you can view all of the statuses that you can set.

13:12.870 --> 13:15.990
The one that set by default by Express is the 200.

13:15.990 --> 13:22.260
This is if things went OK what we're going to be using for an error is a 400 a 400 means there was some

13:22.260 --> 13:27.810
bad input which is going to be the case if the model can't be saved maybe the user didn't provide a

13:27.810 --> 13:30.810
text property or maybe the text string was empty.

13:30.810 --> 13:37.090
Either way we want to send a 400 back and that's going to happen right before we call send.

13:37.120 --> 13:42.150
All we're going to do is call status passing in the status of 400.

13:42.150 --> 13:48.710
With this in place we are now ready to test out our post to do's request over inside of postman.

13:48.810 --> 13:53.120
I'm going to restart the server over inside of the terminal and you could start this up with node mine

13:53.130 --> 13:56.830
if you like for the moment I'll be manually restarting it.

13:56.850 --> 14:02.460
We're now up on localhost three thousand and over inside of postman we can make the exact same request

14:02.460 --> 14:03.570
we made earlier.

14:03.570 --> 14:04.510
I'm going to send it off.

14:04.590 --> 14:06.470
And what do we get we get at 200.

14:06.570 --> 14:12.460
This is fantastic it's the default status which means things went great down below the Jason response's

14:12.480 --> 14:14.280
exactly what we expected.

14:14.280 --> 14:15.910
We have our tax that we set.

14:15.930 --> 14:20.910
We have the I.D. which was generated we have completed that which is set to null the default and we

14:20.910 --> 14:23.880
have completed set to false default.

14:23.940 --> 14:25.970
This is brilliant.

14:25.980 --> 14:30.870
We can also test what happens when we try to create it to do it without the proper information.

14:30.870 --> 14:35.000
For example maybe I set a text property equal to an empty string.

14:35.100 --> 14:39.930
If I send this along we now get a 400 bad request down below.

14:39.930 --> 14:44.840
We have a bunch of validation code saying that the to do validation failed.

14:44.910 --> 14:48.360
Then we can go into the errors object to get the specific error.

14:48.360 --> 14:53.920
Here we see the text field failed and the message is Path text is required.

14:53.940 --> 14:59.130
All of this information can help someone fix their request and make a proper one.

14:59.130 --> 15:06.480
Now if I head over into robo Mongo I'm going to refresh the collection for Dewes look at the last one

15:06.480 --> 15:10.580
and it is indeed the one we created and Postman the text equal to.

15:10.590 --> 15:12.810
This is from postman.

15:12.960 --> 15:20.570
With this in place we now have our very first HTP and point set up for the to do rest API.

15:20.640 --> 15:25.520
Now I haven't talked exactly about what rest is we're going to talk about that later.

15:25.650 --> 15:28.680
For now we're going to focus on creating these endpoints.

15:28.680 --> 15:33.110
The rest of version will come up a little later when we start adding authentication.

15:33.240 --> 15:37.800
With this in place I want to give you a challenge your challenge is going to be to fire off a couple

15:37.830 --> 15:39.790
more to do requests.

15:39.870 --> 15:46.770
Try to set some text for at least one more to do make sure it shows up in the database as expected if

15:46.770 --> 15:48.040
it does great.

15:48.150 --> 15:49.170
You are done.

15:49.290 --> 15:50.760
Take a moment to add a few to do's.

15:50.790 --> 15:53.330
Pause the video and when you're done click play

15:57.290 --> 16:00.320
that one should have been pretty easy over inside of post man.

16:00.320 --> 16:03.540
We can add a few more to do's.

16:03.590 --> 16:04.960
I'm going to add some right here.

16:05.990 --> 16:08.430
Charge My Phone.

16:08.470 --> 16:10.910
I don't think I've ever needed to be reminded of that one.

16:11.080 --> 16:18.430
And we'll add take a break for lunch because it's about 12:30 and I'm starting to get pretty hungry.

16:18.580 --> 16:22.950
Down below we see the charge my phone to do was created with a unique ID.

16:22.950 --> 16:24.490
I'm going to send off this one.

16:24.690 --> 16:30.930
And we see that we take a break for lunch to do was created over inside of robo mango we can give our

16:30.930 --> 16:33.920
to do's collection a final refresh.

16:33.920 --> 16:39.170
I'm going to expand to those last three items and they are indeed the three items we created in post

16:39.170 --> 16:43.180
man and now that we have some meaningful work done in our project.

16:43.190 --> 16:45.210
Let's go ahead and commit our changes.

16:45.210 --> 16:50.100
As you can see over and atom the server directory is green meaning that it hasn't been added to get

16:50.300 --> 16:51.340
and the package.

16:51.360 --> 16:57.030
Jason File is orange which means that it's been modified even though it is tracking it over in the terminal.

16:57.030 --> 17:02.000
We can shut down the server and I always like to run and get status to do a sanity check here.

17:02.010 --> 17:04.320
Everything does look as expected.

17:04.320 --> 17:09.290
I can then use get added to add everything followed by one more sanity check.

17:09.300 --> 17:13.820
Here we have our four new files in the server folder as well as our package.

17:13.820 --> 17:15.030
Does Jason File.

17:15.030 --> 17:16.920
Now it's time to make that commit.

17:17.280 --> 17:18.660
I'm going to create a quick commit.

17:18.870 --> 17:24.840
I'm using the AM flag which usually adds modified files since I already used add.

17:24.840 --> 17:30.840
I can simply use the AMA flag like we've been doing in the course and the message for this one would

17:30.840 --> 17:39.830
be something like add post to Doo's route and refactor monkeys.

17:39.990 --> 17:40.770
Excellent.

17:40.950 --> 17:46.170
With the commit in place we can now wrap things up by pushing it up to get Haab making sure it's backed

17:46.170 --> 17:49.930
up and making sure it's available for anyone else collaborating on the project.

17:49.930 --> 17:53.740
Remember creating a committee alone does not get it up on get a job.

17:53.790 --> 17:56.550
You've got to push that with another command.

17:56.550 --> 18:01.560
With that in place it's now time to move on to the next video where you will be testing the route you

18:01.560 --> 18:02.730
just created.

18:02.880 --> 18:04.710
Stay tuned I will see you then
