WEBVTT

00:00.630 --> 00:06.030
Now that all of our to do routes are set up and tested in this final video we're going to be exploring

00:06.030 --> 00:09.870
how to create a separate test database for our application.

00:09.900 --> 00:15.600
That means when we run the test suite we're not going to be deleting all of the data inside of our to

00:15.600 --> 00:17.260
do app database.

00:17.310 --> 00:23.770
We'll have a separate database alongside of testen to do app that's used for the testing D-B.

00:23.910 --> 00:28.800
Now in order to settle that up we need a way to differentiate between running our app locally and running

00:28.800 --> 00:30.430
our test suite locally.

00:30.480 --> 00:36.300
And that's exactly where we're going to start this whole issue stems from the fact that in our mongoose

00:36.350 --> 00:42.630
J.S. file we either use the Mongo DB are-I environment variable or we use this string.

00:42.630 --> 00:46.290
This string is used for both testing and for development.

00:46.320 --> 00:51.120
And when I say testing I mean when we run our test script and when I say development I mean when we

00:51.120 --> 00:54.920
run our app locally so we can use it inside of tools like post man.

00:55.050 --> 00:59.700
What we really need is a way to set environment variables locally as well.

00:59.790 --> 01:07.400
So we always use the Mongo DB variable and we never had a default string like the one we have here.

01:07.470 --> 01:11.370
And in order to get that done we're going to look at an environment variable that's actually pretty

01:11.370 --> 01:12.060
special.

01:12.180 --> 01:14.020
It's process dot.

01:14.050 --> 01:16.510
Ian the dot node EMV.

01:16.650 --> 01:17.940
And you don't have to write this code.

01:17.940 --> 01:19.360
I'm writing on line 9.

01:19.410 --> 01:21.510
I'm going to be deleting it in just a moment.

01:21.570 --> 01:27.870
This node Ian the environment variable was made popular by the Express library but it now has been adopted

01:27.870 --> 01:30.940
by pretty much any and node hosting company.

01:31.020 --> 01:38.410
For example Heroku sets this value equal to the string production by default.

01:38.450 --> 01:41.010
That means that we're going to have three environments total.

01:41.090 --> 01:42.820
We already have a production environment.

01:42.830 --> 01:45.870
This is what we call our app on Heroku.

01:45.920 --> 01:52.990
We're going to have a development environment when we run our app locally and we'll have a test environment

01:53.200 --> 01:55.850
when we run our app through moka.

01:55.960 --> 02:01.750
This means we'll be able to set up a different value for Mongo DB You are for all three of those creating

02:01.750 --> 02:04.840
a separate test database to kick things off.

02:04.840 --> 02:08.510
We're going to add some code in the server J.S. file up at the very top.

02:08.680 --> 02:13.300
We'll be moving this code out of server JSA a little bit later but for now we're going to tack it on

02:13.360 --> 02:14.580
right here.

02:14.650 --> 02:23.720
Let's make a variable called envy and we're going to set it equal to process dot NVI dot node envy.

02:23.740 --> 02:27.140
Now this variable currently is only set on Heroku.

02:27.220 --> 02:30.400
We don't have this environment variable set locally.

02:30.400 --> 02:35.980
Now environment variables in general are used for much more than just node your machine has probably

02:36.020 --> 02:41.620
close to two dozen environment variables telling the computer all sorts of things where certain programs

02:41.620 --> 02:45.120
exist what versions of libraries you want to use that sort of stuff.

02:45.310 --> 02:50.910
The node EMV variable however is something that we're going to need to configure in side of our package.

02:50.920 --> 02:57.280
Jason File for our development and test environments then just down below we'll be able to add some

02:57.340 --> 03:01.960
if else statements to configure our app depending on the environment.

03:02.020 --> 03:04.180
If we're in development we'll use one database.

03:04.180 --> 03:06.390
If we're in test we'll use a different one.

03:06.850 --> 03:11.950
Now to kick things off inside of package that Jason we are going to need to tweak the test script setting

03:11.950 --> 03:14.760
the node in the environment variable.

03:14.770 --> 03:19.110
Now you can set environment variables by chaining together multiple commands.

03:19.120 --> 03:23.440
The code we're about to write is going to have a fallback for Windows as well.

03:23.440 --> 03:28.390
So you can write the exact same line if you're on OSX Linux or a windows.

03:28.390 --> 03:31.210
This is going to work everywhere including her Roku.

03:31.210 --> 03:37.720
The goal here is to just set node NVI equal to test before we run the test suite.

03:38.080 --> 03:43.250
Now in order to do that we're going to start by using the export command the export command.

03:43.340 --> 03:46.570
This is available in OS X and Linux this is the way to get it done.

03:46.660 --> 03:52.500
Type this even if you're in Windows because when you deployed to Heroku you are going to be using Linux.

03:52.570 --> 03:57.940
We're going to export node NVI setting an equal to test.

03:57.940 --> 04:00.340
Now if you're on Windows This command is going to fail.

04:00.340 --> 04:05.850
Export is going to trigger an error something along the lines of export command not found.

04:05.950 --> 04:12.640
For Windows users we're going to add this or block where we will call set.

04:12.640 --> 04:19.000
Now set is the same as export only it's the Windows version of the command right after it will be providing

04:19.000 --> 04:26.450
the exact same argument node envy equals test after the final test.

04:26.500 --> 04:30.100
We're going to add to ampersands to change these commands together.

04:30.100 --> 04:33.660
So let's go ahead and break down exactly what's going to happen if you're on Linux.

04:33.760 --> 04:35.010
You're going to run this command.

04:35.170 --> 04:37.810
This command is never going to run because the first one did.

04:38.020 --> 04:41.690
Then we're going to change on a second command running moka.

04:41.920 --> 04:46.870
If you're on Windows This command is going to fail which means you will run the second command.

04:46.870 --> 04:49.480
Either way you get the node in the variable set.

04:49.570 --> 04:52.520
Then finally your chain on a call to moka.

04:52.720 --> 04:58.490
With this in place we now have a way to set our node EMV variable right inside a package.

04:58.510 --> 05:01.700
Jason this is a quick cross OS update.

05:01.720 --> 05:05.700
As you can see here we have a modified version of that test script.

05:05.710 --> 05:09.860
The original test script had a problem on the Windows side of things.

05:09.940 --> 05:16.090
It would set the environment variables equal to the string test with a space at the end as opposed to

05:16.120 --> 05:17.380
just the string.

05:17.380 --> 05:18.870
Ts t.

05:19.030 --> 05:26.470
In order to properly set the ENP variable to just ts t and not ts t space we're going to be wrapping

05:26.620 --> 05:33.400
the entire set argument inside of quotes and we're escaping those quotes since we use quotes inside

05:33.460 --> 05:35.060
of our Jason File.

05:35.140 --> 05:38.970
This command is going to work on Linux OSX and Windows.

05:38.980 --> 05:39.470
All right.

05:39.550 --> 05:40.220
That's it.

05:42.110 --> 05:46.620
No I'm actually not going at this for the start script the start script which is for the development

05:46.620 --> 05:48.700
environment will just be the default.

05:48.780 --> 05:54.360
We'll have it set to production on Heroku We'll have it set to test inside of our test script and in

05:54.360 --> 06:00.030
the case of this script we'll just default it inside of servisez ass because we tend to run in this

06:00.060 --> 06:04.350
file without actually going through the start script right here in a server.

06:04.350 --> 06:12.020
J.S. also had a default to development if run production this is going to be set if we're on test this

06:12.020 --> 06:16.670
is going to be set if we're on development this won't be set and development will be used which means

06:16.670 --> 06:24.800
we are ready to add some if statements if the EMV is development we want to do something.

06:24.800 --> 06:28.860
The thing we want to do is set up the Mongo DB you r l else.

06:28.910 --> 06:35.090
If the environment is the test environment in that case we also want to set up some custom database

06:35.150 --> 06:37.840
you R-AL and we would do that right in here.

06:37.850 --> 06:40.910
Now we can go ahead and actually set up our environment variables.

06:40.910 --> 06:46.130
We have two environment variables being used throughout the app both of which are set on her Roku.

06:46.130 --> 06:49.340
So theres no reason to worry about that environment in the production environment.

06:49.340 --> 06:53.630
We have our port environment variable right here and we have our Mongo.

06:53.660 --> 06:57.280
DD You are I variable over inside of server.

06:57.310 --> 07:04.390
Yes if we are in the development environment I'm going to go ahead and set process Dotti and we dot

07:04.400 --> 07:07.000
port equal to 3000.

07:07.010 --> 07:10.580
This means that we can actually remove the default right here.

07:10.700 --> 07:13.970
There's no need to have a default because port is already going to be set.

07:13.970 --> 07:16.120
It will be set on Heroku for production.

07:16.190 --> 07:20.210
It'll be set locally for development and right here we'll set it for our final environment.

07:20.210 --> 07:25.360
The test environment setting in equal to three thousand.

07:25.520 --> 07:28.230
The next thing we're going to do is set a mongo DB.

07:28.250 --> 07:33.770
You are my environment variable for development and test which is the exact same name for the variable

07:33.770 --> 07:35.240
we have on production.

07:35.240 --> 07:38.300
I'm going to remove our default taking the string and cutting it out.

07:38.300 --> 07:43.060
So it's in my clipboard then I can remove all the excess code for setting that default.

07:43.130 --> 07:48.380
And what we're left with is just a reference to the environment variable over inside of server.

07:48.410 --> 07:51.870
Yes we can now set that environment variable for both environments.

07:51.900 --> 07:59.800
Process dot EMV dot Mongo D-B underscore you are.

07:59.990 --> 08:02.930
And we're going to set that equal to the string I just copied.

08:02.930 --> 08:06.780
All right here we are using the to do app database.

08:06.860 --> 08:09.770
Now down below we can set process.

08:09.890 --> 08:13.360
Ian V dot Mongo DB.

08:13.420 --> 08:16.900
You are I equal to the string we just copied.

08:16.910 --> 08:21.940
But instead of setting an equal to the to do app database we're going to set it equal to the to do app

08:22.190 --> 08:23.680
test database.

08:23.690 --> 08:28.190
Now when we run our application in test mode we're going to be using a completely different database.

08:28.190 --> 08:33.920
So it's not going to wipe the database that we're using for development to test that everything is working

08:33.920 --> 08:35.150
as expected.

08:35.150 --> 08:36.580
Right on the second line.

08:36.600 --> 08:41.930
All I'm going to do is log out the environment variable using console that log.

08:42.090 --> 08:45.000
I'm going to print the string in V with a couple of actresses.

08:45.000 --> 08:50.310
So it's easy to spot in the terminal output and then I'll go ahead and pass the EMV variable in as the

08:50.310 --> 08:51.720
second argument.

08:51.720 --> 08:54.890
Now we can go ahead and test that everything is working as expected.

08:55.050 --> 09:00.130
Over inside of the terminal I'm going to start up our app using node server server.

09:00.160 --> 09:00.970
Yes.

09:01.470 --> 09:02.420
And what do we get.

09:02.460 --> 09:06.420
We get an NVI equal to development which is exactly what we expect.

09:06.570 --> 09:09.840
And now we can play around with it in postman over inside a post man.

09:09.840 --> 09:11.870
I'm going to switch to my local environment.

09:14.030 --> 09:19.100
Then I'm going to go ahead and fetch all of my to do's and right here you can see we have some left

09:19.130 --> 09:20.930
over test data.

09:20.930 --> 09:23.390
What I want to do is go ahead and tweak this first one.

09:23.390 --> 09:29.090
So it's different then we'll run our tests and make sure that the tweaked to do still shows up because

09:29.090 --> 09:32.080
when we run the tests we shouldn't be accessing the same database.

09:32.120 --> 09:33.950
So none of this data should get changed.

09:34.130 --> 09:41.040
I'm going to copy the ID for the first item go into my patch call I'm updating the text and the completed

09:41.040 --> 09:41.510
property.

09:41.520 --> 09:42.150
So that's good.

09:42.150 --> 09:43.360
I don't need to change that.

09:43.500 --> 09:48.840
I'm going to go ahead and swap out the ID send off the call and now we have the updated to do with the

09:48.840 --> 09:51.720
text of updates from postman.

09:51.720 --> 09:59.850
Next up I'm going to go into the terminal shut down node server and run our tests using NPM test.

09:59.850 --> 10:01.410
Now when we do this what do we get.

10:01.410 --> 10:04.030
We get our EMV variable set to test right here.

10:04.170 --> 10:05.510
Then it runs through the test suite.

10:05.550 --> 10:08.340
All of our tests pass which is fantastic.

10:08.370 --> 10:13.620
The true test as to whether or not what we set up works is if we start up the server again and we try

10:13.620 --> 10:18.720
to fetch our data from the development database over inside of postman.

10:18.730 --> 10:24.720
I'm going to make that get to do is request one last time and right here are to do data still shows

10:24.720 --> 10:30.420
up as expected even though the test suite did run it didn't matter because it's not wiping this database

10:30.420 --> 10:31.010
anymore.

10:31.110 --> 10:37.170
It's now wiping a brand new database and you can view in robo Mongo if I click the connection and click

10:37.200 --> 10:38.100
refresh.

10:38.130 --> 10:44.840
We now have to do app databases we have to do app and we have to do app test.

10:44.850 --> 10:46.490
This is fantastic.

10:46.500 --> 10:49.940
Everything is set up and we are ready to get rolling.

10:49.950 --> 10:54.270
Now what I do want to do before we go is take all of this code on a server J S and move it somewhere

10:54.270 --> 10:54.700
else.

10:54.720 --> 11:00.420
It doesn't really belong here and it only makes the server file more complex than it needs to be in

11:00.420 --> 11:01.350
the server directory.

11:01.350 --> 11:08.040
I'm going to make a brand new folder called config and in the config folder I'll make a new file called

11:08.040 --> 11:15.620
config dot J.S. and inside of here we can do all of that process environment variable configuration.

11:15.660 --> 11:22.030
I'm going to copy all of the code and replace it to a require call to that file.

11:22.080 --> 11:26.660
It's a relative file so we'll go to a forward slash config forward slash config.

11:26.690 --> 11:30.670
Jay Yes leaving off the extension inside of configfs.

11:30.690 --> 11:35.440
We can now copy the code in and remove the line related to console dot lock.

11:35.520 --> 11:41.700
Let's wrap this video up by committing our changes and deploying to Heroku over inside of the terminal

11:41.710 --> 11:46.440
I'm going to clear the terminal output then we can go ahead and run get status to see what files we

11:46.440 --> 11:48.250
have changed and we have quite a few.

11:48.360 --> 11:51.160
We also have some new files in the server directory.

11:51.390 --> 11:56.250
I'm going to use get added to add all of that to the next commit and not use get status again and to

11:56.250 --> 11:56.760
confirm.

11:56.790 --> 11:58.500
Everything looks good.

11:58.500 --> 11:59.780
Now we're ready for that.

11:59.820 --> 12:08.420
And I can go ahead and do that get commit with the M flag providing our message set up separate test

12:08.480 --> 12:15.250
and development Envy's and I'm also going to deploy it to Heroku so we can verify we haven't broken

12:15.250 --> 12:16.260
anything there.

12:16.430 --> 12:19.540
Get push Heroku master.

12:19.810 --> 12:26.200
Once this is done we'll wrap the video up by heading into postmen and making a get to Doo's request

12:26.440 --> 12:29.530
to our Heroku application.

12:29.860 --> 12:34.960
We're compressing the app and launching it now it looks like everything is going to go over inside of

12:34.960 --> 12:35.560
post man.

12:35.560 --> 12:41.020
I'm going to switch environments from to do app local to to do app parochial and we can fire off this

12:41.020 --> 12:42.240
request now.

12:42.250 --> 12:45.440
Now here we get our to do items coming from the real database.

12:45.580 --> 12:50.240
Which means nothing was broken on the Heroku application and it shouldn't be.

12:50.260 --> 12:53.360
Technically we haven't changed anything in Heroku.

12:53.380 --> 12:57.880
All we're doing is we're running the config file but we don't use the default because it's already set

12:58.090 --> 13:02.920
and it's not going to pass any of these statements because the ENP variable is going to be equal to

13:02.920 --> 13:04.160
the string production.

13:04.330 --> 13:09.910
So as far as Heroku is concerned nothing has changed and it's showing that because the data is still

13:09.910 --> 13:11.930
coming back as expected.

13:12.070 --> 13:15.740
And that is it for this video and that is it for this section in this section.

13:15.740 --> 13:24.220
We learned about Mongo D-B mongoose API eyes post man testing routes all sorts of great features in

13:24.220 --> 13:29.950
the next section we're going to wrap up the application by adding authentication that is all coming

13:29.950 --> 13:30.700
up next.

13:30.730 --> 13:32.780
I am super excited to get to it.

13:32.800 --> 13:34.050
So stay tuned.

13:34.060 --> 13:36.590
I will see you in the next section.
