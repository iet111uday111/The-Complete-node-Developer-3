WEBVTT

00:00.390 --> 00:05.400
In this video you're going to learn how to connect your note applications to the Mongo DB database that

00:05.400 --> 00:07.400
you have running on your local machine.

00:07.560 --> 00:12.750
This means that we'll be able to issue database commands right inside of our node apps to do stuff like

00:12.750 --> 00:15.660
insert update delete or read a data.

00:15.660 --> 00:18.270
This is going to be critical if we're ever going to make that to do.

00:18.270 --> 00:24.300
Arrest API when someone hits one of our API endpoints we want to manipulate the database whether it's

00:24.300 --> 00:28.950
reading all of that to do's or adding a new one before we can do any of that though we have to learn

00:28.950 --> 00:33.440
the basics to connect to our Mongo DB database from inside of Node.

00:33.580 --> 00:38.070
J.S. we're going to be using an NPR module created by the Mongo D-B team.

00:38.100 --> 00:43.230
It's called node Mongo D-B native but it includes all of the features you'll need to connect to and

00:43.230 --> 00:45.910
interact with your database to get to it.

00:45.930 --> 00:53.670
We're going to google node Mongo D-B native it a good hub repo which should be the first link is the

00:53.670 --> 00:57.060
one we want the node Mongo D-B native repository.

00:57.150 --> 01:00.940
And if we scroll down we can take a look at a few important links.

01:00.960 --> 01:04.590
First up we have documentation and we also have our API docs.

01:04.590 --> 01:09.370
These are going to be critical as we start exploring the features that we have inside of this library.

01:09.510 --> 01:12.240
Double-O there's a ton of examples on how to get started.

01:12.270 --> 01:15.170
We'll be going through a lot of this stuff in this course.

01:15.210 --> 01:21.690
But I do want to make you aware where you can find other resources because the Mongo D-B native library

01:21.690 --> 01:23.310
has a ton of features.

01:23.310 --> 01:28.980
There are entire courses dedicated just to Mongo D.B and they don't even begin to cover everything that's

01:28.980 --> 01:30.860
built in to this library.

01:30.870 --> 01:37.200
We're going to be focusing on the important and common subset of Mongo D-B that we need for node J.S.

01:37.320 --> 01:39.060
apps to get started.

01:39.060 --> 01:41.070
Let's go ahead and open up the docs.

01:41.670 --> 01:46.800
When you go to the docs page you do have to pick your version will be using version 2.2 of the driver

01:46.800 --> 01:48.430
and there's two important links here.

01:48.450 --> 01:54.690
We have a reference link this includes guide like articles things to get you started and other various

01:54.690 --> 01:55.790
references.

01:56.220 --> 02:02.160
If you go back and you go to the API link this includes the details of every single method available

02:02.190 --> 02:04.610
to you when you're working with the library.

02:04.740 --> 02:12.010
And we'll be exploring some of the methods in here as we get started creating our node to do API.

02:12.020 --> 02:17.180
For now though we can get started by creating a new directory for this project and then we're going

02:17.180 --> 02:22.580
to go ahead and install the Mongo DB library and connect to the database we have running.

02:22.580 --> 02:27.750
Now I am going to assume that you have your database running for all the videos in this section.

02:27.770 --> 02:30.440
I have that running in a separate tab in my terminal.

02:30.440 --> 02:32.060
It's sitting right here.

02:32.180 --> 02:36.800
If you're on Windows refer to the instructions in the Windows install video to start your database if

02:36.800 --> 02:42.080
you forget if you're on the Linux or OS X operating systems use those instructions and don't forget

02:42.290 --> 02:49.580
to also include that DBI path argument that is essential for booting up your Mongo db server to kick

02:49.580 --> 02:50.060
things off.

02:50.060 --> 02:53.940
I'm going to make a new folder on the desktop for the node API.

02:54.230 --> 02:59.980
I'll use M-K Diyar to create a new directory called node hyphen to do.

02:59.980 --> 03:01.430
Heighth an API.

03:01.630 --> 03:08.860
And then I can go ahead and UCD to go into that directory C-D node to do API and from here we're going

03:08.860 --> 03:11.200
to run NPM in it which creates our package.

03:11.270 --> 03:19.790
Jason File and lets us install this Mongo DB library NPM in it once again like we've done throughout

03:19.790 --> 03:25.690
the course we're going to be using enter to skip through all of the options using the defaults for each.

03:25.700 --> 03:28.470
Once we get to the end we can confirm and now our package.

03:28.610 --> 03:30.560
Jason file is created.

03:30.560 --> 03:34.220
The next thing we're going to do is open up this directory inside of Adam.

03:34.490 --> 03:37.010
I'm going to go ahead and pop that open real quick.

03:37.070 --> 03:40.750
It's on the desktop and here it is node to do API.

03:41.090 --> 03:46.850
Next up inside of the root of the project we're going to create a new folder and I'm going to call this

03:46.850 --> 03:50.770
folder a playground inside of here will store various scripts.

03:50.780 --> 03:53.060
They're not going to be scripts related to the to do API.

03:53.060 --> 03:55.930
They'll be scripts related to Mongo DB.

03:55.940 --> 04:00.250
So I do want to keep them in the folder but I don't necessarily want them to be part of the app.

04:00.290 --> 04:04.540
We'll use the playground folder for that like we have in the past in the playground folder.

04:04.550 --> 04:07.860
Let's go ahead and make a new file and we'll call this file.

04:08.000 --> 04:14.000
Mongo D-B connect and Dot J as inside of this file.

04:14.000 --> 04:18.460
We're going to get started by loading in the library and connecting to the database.

04:18.500 --> 04:22.670
Now in order to do that we do have to install the library from the terminal.

04:22.670 --> 04:25.530
We can run NPM install to get that done.

04:25.790 --> 04:31.500
NPM install in the library name is Mongo D-B.

04:31.520 --> 04:32.630
All lower case.

04:32.690 --> 04:33.900
No hyphens.

04:33.980 --> 04:38.480
Then we're going to go ahead and specify the version to make sure we're all using the same functionality

04:38.570 --> 04:41.010
at two point two point five.

04:41.060 --> 04:46.420
And this is the most recent version as of the filming after the version number I am going to use the

04:46.460 --> 04:47.730
save flag.

04:47.850 --> 04:52.520
This is going to save it as a regular dependency which it is we're going to need this to run the to

04:52.520 --> 04:56.510
do API application with Mongo D-B now installed.

04:56.510 --> 05:01.640
We can move in it to our Mongo DB connect file and start connecting to the database.

05:01.700 --> 05:06.740
The first thing we need to do is pull something out of the library that we just installed that Mongo

05:06.740 --> 05:07.980
DB library.

05:08.030 --> 05:13.640
What we're looking for is what's called the Mongo client the Mongul client lets you connect to a mongo

05:13.640 --> 05:16.880
server and issue commands to manipulate the database.

05:16.880 --> 05:25.470
Let's go ahead and kick things off by creating a constant called uppercase am a mongo client and we're

05:25.470 --> 05:32.290
going to set that equal to require And we're going to require the library we just installed a mango

05:32.290 --> 05:38.980
D-B and from that library we're going to pull off Mongo client just like this.

05:39.100 --> 05:40.020
Excellent.

05:40.270 --> 05:46.060
With the Mongul client now in place we can call Mongul client and connect to connect to the database

05:46.600 --> 05:50.260
Mongo client ADOT connect.

05:50.470 --> 05:53.200
And this is a method and it takes two arguments.

05:53.200 --> 05:59.410
The first argument is a string and this is going to be you R-AL where your database lives now in a production

05:59.410 --> 05:59.920
example.

05:59.920 --> 06:04.120
This might be an Amazon Web services you are out or Heroku you are Al.

06:04.180 --> 06:07.070
For our case it's going to be that local host you are l.

06:07.240 --> 06:08.590
We'll talk about that in just a second.

06:08.590 --> 06:14.260
The second argument that is going to be a callback function the callback function will fire after the

06:14.260 --> 06:16.460
connection has either succeeded or failed.

06:16.600 --> 06:20.770
And then we can go ahead and handle things appropriately if the connection fails will print a message

06:20.800 --> 06:22.000
and stop the program.

06:22.000 --> 06:25.310
If it succeeded we can start manipulating the database.

06:25.450 --> 06:29.000
And that first argument in our case is going to look something like this.

06:29.080 --> 06:34.610
We're going to start it off with Mongo D-B colon of forward slash forward slash.

06:34.690 --> 06:40.570
When we connect it to a mango D-B database we want to use the mango D-B protocol like this.

06:40.750 --> 06:45.970
Next up it's going to be at local host since we're running it on our local machine and we have the port

06:46.270 --> 06:52.590
which we already explored to 7 in 0 1 7 after the port.

06:52.610 --> 06:57.360
We need to use forward slash to specify which database we want to connect to.

06:57.500 --> 07:00.710
Now in the last video we used that test database.

07:00.710 --> 07:06.590
This is the default database that Mongo DB gives you but we can go ahead and create a new one after

07:06.590 --> 07:07.220
the slash.

07:07.220 --> 07:11.960
I'm going to call the database to do app just like this.

07:11.960 --> 07:15.950
Next up we can go ahead and provide that callback function.

07:16.040 --> 07:21.830
I'm going to use and yes six arrow function and we're going to get past two arguments the first one

07:21.830 --> 07:23.450
is going to be an error argument.

07:23.450 --> 07:26.440
This may or may not exist just like we've seen in the past.

07:26.450 --> 07:28.370
It will exist if an error actually happened.

07:28.370 --> 07:29.540
Otherwise it won't.

07:29.540 --> 07:32.280
The second argument is going to be the db object.

07:32.300 --> 07:36.790
This is what we can use to issue commands to read and write data.

07:36.830 --> 07:42.080
Now before we write any data I'm going to go ahead and handle any potential errors that come about.

07:42.290 --> 07:43.860
I'll do that using an if statement.

07:43.920 --> 07:50.640
If error if there is an error we're going to print a message to the console letting whoever is looking

07:50.640 --> 07:56.700
at the logs know that we were unable to connect to the database server console a dot log.

07:57.510 --> 08:06.640
That inside of quotes something like unable to connect to Mongo DB server.

08:06.790 --> 08:07.890
Excellent.

08:08.050 --> 08:14.470
After the if statement we can go ahead and log out a success message something like cancel that log

08:14.790 --> 08:21.950
and then inside of quotes we'll use connected to Mongo DB server.

08:22.340 --> 08:27.860
Now when you're handling errors like this the success code is going to run even if the error block runs

08:28.070 --> 08:31.520
what we want to do instead is add a return statement right here.

08:31.520 --> 08:34.070
This return statement isn't doing anything fancy.

08:34.070 --> 08:39.260
All we're doing is using it to prevent the rest of the function from executing as soon as you return

08:39.260 --> 08:40.050
from a function.

08:40.100 --> 08:41.390
The program stops.

08:41.390 --> 08:44.630
Which means if an error does occur the message will get logged.

08:44.630 --> 08:49.760
The function will stop and we'll never see this connected to Mongo db server message.

08:49.760 --> 08:54.860
The alternative from the return keyword would be to add an else clause like this and put our success

08:54.860 --> 08:55.940
code in here.

08:55.940 --> 09:00.230
But it's unnecessary we can just use this syntax which I prefer.

09:00.230 --> 09:03.270
Now before we run this file there is one more thing I want to do.

09:03.380 --> 09:07.140
At the very bottom of our callback function we're going to call a method on a DB.

09:07.140 --> 09:09.570
It's D.B and datt close.

09:09.590 --> 09:12.500
This closes the connection with the Mongo DB server.

09:12.710 --> 09:17.270
Now that we have this in place we can actually save the Mongo DB connect file and run it over inside

09:17.270 --> 09:17.980
of the terminal.

09:18.080 --> 09:23.510
It doesn't do much yet but it is indeed going to work over in the terminal we can run it using node

09:24.410 --> 09:31.840
playground as the directory and the file itself as Mongo D-B hyphen connect dot J ass.

09:32.000 --> 09:33.500
When we run this file what do we get.

09:33.500 --> 09:39.290
We get connected to Mongo DB server printing it to the screen and if we had over into the tab where

09:39.290 --> 09:44.960
we have the Mongo DB server we can see we got a new connection connection accepted and then that connection

09:45.020 --> 09:46.780
was closed down below.

09:46.790 --> 09:48.710
And this is fantastic.

09:48.800 --> 09:54.470
Using the Mongul library we were able to connect print a message and disconnect from the server.

09:54.470 --> 10:00.020
Now you might have noticed that we changed the database name right here and we never actually did anything

10:00.020 --> 10:03.820
to create it in Mongo D-B unlike other database programs.

10:03.830 --> 10:06.710
You don't need to create a database before you start using it.

10:06.860 --> 10:10.430
If I want to kick up a new database I simply give it a name something like.

10:10.430 --> 10:11.240
Users.

10:11.240 --> 10:14.710
Now I have a users database I can connect to it and I can manipulate it.

10:14.720 --> 10:17.000
There is no need to create that database.

10:17.000 --> 10:24.590
First I'm going to go ahead and change this back to to do app and if we head into the robo Mongo program

10:24.770 --> 10:31.170
and connect it to our local database you'll also see that the only database we have here is test it

10:31.330 --> 10:35.260
to do app database was never even created even though we connected to it.

10:35.270 --> 10:41.030
Mongo is not going to create the database until we start adding and data into it and we can go ahead

10:41.030 --> 10:48.460
and do that right now inside of atom what we're going to do right before our call to DVD-Rs close is

10:48.520 --> 10:51.310
insert a new record into a collection.

10:51.310 --> 10:53.530
Now this is going to be the to do application.

10:53.560 --> 10:59.240
We're going to have two collections in this app a to dues collection and a user's collection.

10:59.350 --> 11:06.010
Right here we can go ahead and start adding some data to the collection by calling it DBI dot collection

11:06.940 --> 11:11.710
DVD collection takes as its only argument in the string name for the collection.

11:11.710 --> 11:15.640
You want to insert into now like the actual database itself.

11:15.670 --> 11:17.750
You don't need to create this collection first.

11:17.800 --> 11:23.700
You can simply give it a name like uppercase t to do's and you can start inserting into it.

11:23.710 --> 11:26.530
There is no need to run any command to create it.

11:26.530 --> 11:33.580
Right here we're going to use a method available on our collection called insert one insert one lets

11:33.580 --> 11:36.440
you insert a new document into your collection.

11:36.460 --> 11:40.330
It takes two arguments and the first one is going to be an object.

11:40.330 --> 11:42.670
This is going to store the various key value pairs.

11:42.670 --> 11:47.280
We want to have on our document and the second one is going to be a callback function.

11:47.290 --> 11:51.740
This callback function will get fired when things either fail or go well.

11:51.760 --> 11:56.590
You're going to get an error argument which may or may not exist and you'll also get the result argument

11:56.590 --> 12:02.170
which is going to be provided if things went well inside of the arrow callback function itself.

12:02.170 --> 12:06.940
We can add some code to handle the error and then we'll add some code to print the object to the screen

12:06.940 --> 12:08.550
if it was added successfully.

12:08.650 --> 12:11.910
First up let's add the air handler much like we do above.

12:11.920 --> 12:14.470
We're going to check if the error argument exists.

12:14.470 --> 12:20.720
If it does then we'll simply print a message using the return keyword to stop the function execution.

12:20.770 --> 12:28.350
Here we can use cancel dialog to print unable to insert to do excellent.

12:28.420 --> 12:33.940
The second argument Ahman a past to console dialog is going to be the actual air object itself.

12:34.000 --> 12:39.640
So someone's looking at the logs they can see exactly what went wrong down below our if statement.

12:39.640 --> 12:44.740
We can add our success code in this case all we're going to do is pretty print something to the screen

12:45.190 --> 12:46.930
console dialog.

12:47.080 --> 12:54.410
Then I'm going to call Jason and Dot string if I and then we're going to go ahead and pass in result

12:54.870 --> 13:01.010
dot ops the OPs attribute is going to store all of the docs that were inserted in this case we used

13:01.010 --> 13:01.840
insert one.

13:01.850 --> 13:04.200
So it's just going to be our one document.

13:04.430 --> 13:09.500
And then I can add my other two arguments undefined for the filter function and the indentation will

13:09.530 --> 13:11.420
be to do with this in place.

13:11.430 --> 13:17.150
We can now go ahead and execute our file and see what happens over inside of the terminal.

13:17.150 --> 13:25.050
I'm going to run node playground board slash Mongo D-B hyphen connect Dhananjay Yes.

13:25.190 --> 13:31.130
When I execute the command we get our success message connected to Mongo db server then we get an array

13:31.130 --> 13:32.990
of documents that were inserted.

13:33.010 --> 13:37.540
Now as I mentioned in this case we just inserted one document and that shows up right here.

13:37.700 --> 13:41.630
We have the text property the text property gets created by us.

13:41.630 --> 13:46.880
We have the completed property that gets created by us and we have the underscore ID property which

13:46.880 --> 13:49.560
gets automatically added by Mongo.

13:49.580 --> 13:54.650
Now the underscore ID property is going to be the topic of the next video we're going to talk in-depth

13:54.650 --> 13:58.030
about what it is why it exists and why it's awesome.

13:58.040 --> 14:01.420
For now we're going to go ahead and just know that it's a unique identifier.

14:01.420 --> 14:04.330
It's an idea given to just this document.

14:04.550 --> 14:05.430
And there we go.

14:05.430 --> 14:10.710
That is all it takes to insert a document into your Mongo DB database using node.

14:10.730 --> 14:16.020
J.S. we can view this doc over inside of a robo mango up here.

14:16.070 --> 14:19.390
I'm going to click the connection using right click and click refresh.

14:19.430 --> 14:23.570
This reveals our brand new to do app database if we open that up.

14:23.630 --> 14:25.150
We get our collections list.

14:25.160 --> 14:28.820
We can then go into the collections view the documents and what do we get.

14:28.820 --> 14:30.430
We get our one to do item.

14:30.440 --> 14:32.940
If we expand it we can see we have our ID.

14:33.020 --> 14:36.530
We have our text property and we have our completed boolean.

14:36.530 --> 14:38.410
In this case the to do is not completed.

14:38.480 --> 14:40.840
So the completed value is false.

14:40.910 --> 14:45.750
Now that we have this in place what I want you to do is add a new record into a collection.

14:45.760 --> 14:49.500
This is going to be your challenge for the video over inside of Adam.

14:49.520 --> 14:55.270
What I'd like you to do is take the code all the way from D-B collection down to the bottom of our callback

14:55.300 --> 14:58.730
and comment it out and then we're going to go ahead and add something.

14:58.730 --> 15:08.560
And down below right here you're going to insert new doc into the users collection uppercase you a users

15:08.740 --> 15:13.580
and this doc is going to have a few properties I want you to give it a name property set that equal

15:13.580 --> 15:14.810
to your name.

15:14.970 --> 15:16.970
Then we're going to give it an age property.

15:16.970 --> 15:20.190
And last but not least we can give it a location string.

15:20.270 --> 15:23.500
I want you to insert that doc using Insert one.

15:23.600 --> 15:28.670
You're going to need to pass in the new collection name into the collection method then down below you're

15:28.670 --> 15:33.590
going to add some error handling code and you're going to print the ops to the screen once you rerun

15:33.590 --> 15:34.370
the file.

15:34.370 --> 15:39.080
You should be able to view your record in the terminal and you should be able to refresh things over

15:39.080 --> 15:40.510
in robo Mongo.

15:40.520 --> 15:46.610
You should see the new users collection and you should see your user with the name age and location

15:46.670 --> 15:48.530
you specified right here.

15:48.530 --> 15:54.440
So take a moment to pause the video create that new record check that it works by viewing it in the

15:54.440 --> 15:56.060
terminal and in roba Mongo.

15:56.060 --> 15:59.820
And when you're done go ahead and click play.

15:59.860 --> 16:00.640
How'd you do.

16:00.760 --> 16:06.040
Hopefully you were able to insert a new document into that user's collection which you needed to do

16:06.040 --> 16:12.250
in order to get this done is call D-B Dom collection so we can access the collection we want to insert

16:12.250 --> 16:16.080
into which in this case is users.

16:16.090 --> 16:20.080
Next up we have to call a method to manipulate that users collection.

16:20.080 --> 16:21.390
We want to insert a new document.

16:21.400 --> 16:25.390
So we're going to use Insert one just like we did up above.

16:25.390 --> 16:30.430
We're going to pass into insert one or two arguments the first one is the document to insert.

16:30.490 --> 16:32.540
We're going to give it a name property.

16:32.610 --> 16:39.030
I'll set that equal to Andrew and then we can go ahead and set the age equal to something like 25.

16:39.040 --> 16:43.290
And lastly we'll set location equal to my current location.

16:43.300 --> 16:45.530
Philadelphia excellent.

16:45.570 --> 16:50.680
The next argument we wanted to pass in is our callback function which is going to get called with the

16:50.680 --> 16:57.030
error object as well as of the result inside of the callback function itself.

16:57.030 --> 17:00.780
We're going to first handle the error if there was an error.

17:00.840 --> 17:03.440
We're going to go ahead and log it to the screen.

17:03.640 --> 17:08.700
I'm going to return console log and then we can put a message right here.

17:08.850 --> 17:16.860
Unable to insert user then I'll add the error argument as the second argument to cancel that lock.

17:16.890 --> 17:20.450
Next up down below we can add our success case code.

17:20.550 --> 17:29.130
If things do go well all I'm going to do is use console a log to print result dot ops to the screen.

17:29.130 --> 17:33.260
This is going to show us all of the records that were inserted with this in place.

17:33.360 --> 17:38.520
We can now go ahead and rerun the file over inside of the terminal using the up arrow key and the Enter

17:38.520 --> 17:38.940
key.

17:39.030 --> 17:40.400
When we do it what do we get.

17:40.500 --> 17:45.840
We get our array of inserter documents and we just have one the name age and location all come from

17:45.840 --> 17:46.060
us.

17:46.080 --> 17:49.550
And the ideal property comes from a mango D-B.

17:49.590 --> 17:55.200
Next up I wanted you to verify that it was indeed inserted by viewing it over in Roboam Mongo.

17:55.260 --> 18:00.300
In general when you add a new collection or a new database you can just right click the connection itself

18:00.570 --> 18:04.200
click refresh and then you should be able to see everything that was added.

18:04.320 --> 18:06.290
Right here we have our users collection.

18:06.450 --> 18:08.690
I can view the documents for users.

18:08.700 --> 18:09.530
And what do we get.

18:09.570 --> 18:16.600
We get our one document with name set to Andrew age set to 25 and location set to Philadelphia.

18:16.710 --> 18:18.760
With this in place we are now done.

18:18.840 --> 18:25.320
We've been able to connect to our Mongo DB database using node J.S. and we've also learned how to insert

18:25.320 --> 18:29.160
documents using this Mongo native library.

18:29.280 --> 18:33.360
With this in place we're not ready to move on to the next video where we're going to take an in-depth

18:33.390 --> 18:37.970
look at object IDs exploring exactly what they are and why they're useful.

18:37.980 --> 18:38.670
Stay tuned.

18:38.670 --> 18:40.140
I will see you next time
