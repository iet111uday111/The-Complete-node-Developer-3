WEBVTT

00:00.300 --> 00:03.320
It now that you know how to insert data into your database.

00:03.340 --> 00:07.980
Let's go ahead and talk about how we can fetch data out of it and we're going to be using this technique

00:08.220 --> 00:09.550
to do API.

00:09.690 --> 00:13.000
People are going to want to populate a list of all the to do items they need to do.

00:13.020 --> 00:16.750
And they might want to fetch the details about an individual to do item.

00:16.770 --> 00:22.350
All of this is going to require that we can query the Mongo IDB database not to kick things off.

00:22.360 --> 00:26.160
We're going to create a new file based off of Mongo DB connect.

00:26.280 --> 00:32.490
In this new file instead of inserting records like we do here we'll fetch records from the database.

00:32.490 --> 00:35.640
I'm going to created duplicate calling this new file.

00:35.650 --> 00:42.430
Mongo D-B hyphen find Because find is the method we're going to use to query that database down below.

00:42.540 --> 00:48.470
We can go ahead and remove all of the commented out code that currently inserts records Well let's get

00:48.470 --> 00:52.880
started by trying to fetch all of the dues out of our dues collection.

00:52.880 --> 00:58.910
Now if I had over to robo Mongo and open up the to dues collection we have just one record in order

00:58.910 --> 01:00.790
to make this queering a little more interesting.

01:00.790 --> 01:03.680
We're going to go ahead and add a second one right here.

01:03.680 --> 01:10.250
I can click to insert a new document Rogow Mongo can delete insert update and read all of your documents

01:10.250 --> 01:13.120
and this makes it a fantastic tool for debugging.

01:13.130 --> 01:20.250
Right here we can add a new document on the fly with a text property equal to walk with the dog and

01:20.250 --> 01:22.620
we can also tack on a completed value.

01:24.810 --> 01:30.810
I'm going to set completed equal to false no by default we're not going to provide an underscore ID

01:30.810 --> 01:31.250
Propp.

01:31.260 --> 01:38.380
This is going to let Mongo DB automatically generate that object id and right here we have our two days

01:38.950 --> 01:39.770
with this in place.

01:39.780 --> 01:45.180
Let's go ahead and run our first query over inside of atom in atom what we're going to do is access

01:45.180 --> 01:53.120
the collection just like we did over inside of the connect file using DBD collection D-B dot collection

01:53.660 --> 01:56.100
passing in the collection name as the string.

01:56.110 --> 02:01.040
This collection is going to be the to do's upper case t collection.

02:01.040 --> 02:08.670
Now we're going to go ahead and use a method available on collections called Find ADOT find by default.

02:08.750 --> 02:10.930
We can call find with no arguments.

02:10.940 --> 02:16.190
This means we're not providing a query so we're not saying we want to fetch all to do's that are completed

02:16.190 --> 02:17.330
or not completed.

02:17.330 --> 02:21.670
We're just saying we want to patch all to do everything regardless of its values.

02:21.680 --> 02:27.840
We want every document from the to do's collection no calling fine is only the first step.

02:27.860 --> 02:34.340
Find returns a mongo DB cursor this cursor is not the actual documents themselves.

02:34.340 --> 02:38.600
There could be a couple of thousand and that would be really inefficient it's actually a pointer to

02:38.630 --> 02:45.130
those documents and the cursor has a ton of methods we can use those methods to get our documents.

02:45.200 --> 02:53.270
One of the most common cursor methods we're going to be using is dot to uppercase a array to Array.

02:53.270 --> 02:55.350
It does exactly what you might think it does.

02:55.460 --> 02:58.850
Instead of having a cursor we have an array of the documents.

02:58.850 --> 03:04.760
This means we have an array of objects they have ID properties text properties and completed properties.

03:04.760 --> 03:11.130
This two array method gets us exactly what we want back we want back the documents now to array the

03:11.200 --> 03:12.300
returns a promise.

03:12.320 --> 03:15.980
That means we can tack on a then call.

03:15.980 --> 03:20.000
We can add our call back and when things go right we can do something like.

03:20.000 --> 03:22.030
Print those documents to the screen.

03:22.220 --> 03:27.410
We're going to get the documents as the first and only argument here and we can also add an air handler

03:27.440 --> 03:35.070
down below we'll get past an heir argument and we can simply print something to the screen like Konsole

03:35.100 --> 03:35.990
dialogue.

03:36.310 --> 03:39.320
Unable to fetch to do's.

03:39.340 --> 03:42.740
And there's the second argument we'll pass in the air object.

03:42.930 --> 03:48.130
Now up above for the success case what we're going to do is print the documents to the screen.

03:48.280 --> 03:54.400
I'm going to go ahead and use Konsole dialogue to print a little message to do's and then I'll call

03:54.400 --> 03:55.910
Konsole dialogue again.

03:57.350 --> 04:02.790
This time we'll be using our Jason and docstring ify technique.

04:02.870 --> 04:09.810
I'll be passing in the documents undefined for our filter function and to for our spacing.

04:09.890 --> 04:15.860
With this in place we now have a script that is capable of fetching the documents converting them into

04:15.860 --> 04:18.070
an array and printing them to the screen.

04:18.290 --> 04:24.740
Now for the time being I'm going to comment out the D-B a dock close method currently that would interfere

04:24.740 --> 04:26.350
with the code we have above.

04:26.360 --> 04:32.030
So let's go ahead and comment that out save the file and run it from the terminal inside of the terminal.

04:32.030 --> 04:37.430
I'm going to go ahead and run our script obviously since we connected to the database with robo Mongo

04:37.430 --> 04:41.070
it is running somewhere it's running in this other tab over here.

04:41.180 --> 04:42.980
I can run the script.

04:42.980 --> 04:44.170
We're going to run it through node.

04:44.180 --> 04:50.470
It is in the playground folder and the file itself is called Mongo D-B hyphen find.

04:50.480 --> 04:51.070
Dot.

04:51.130 --> 04:51.930
Yes.

04:52.040 --> 04:55.070
When I execute this file We're going to get our results and what do we have.

04:55.070 --> 04:59.130
We have our two do's array with our two documents.

04:59.210 --> 05:04.030
We have our IDs are text properties and are completed boolean values.

05:04.070 --> 05:06.400
And this is fantastic.

05:06.410 --> 05:10.880
We now have a way to query our data right inside of a node.

05:11.020 --> 05:11.890
Yes.

05:11.930 --> 05:13.840
Now this is a very basic query.

05:13.940 --> 05:19.760
We set everything in the to do array regardless of whether or not it has certain values in order to

05:19.760 --> 05:21.560
query based on certain values.

05:21.560 --> 05:24.200
Let's go ahead and switch up our to do's currently.

05:24.210 --> 05:27.180
Both of them have completed a value equal to false.

05:27.200 --> 05:32.930
Let's go ahead and change the walk the dogs completed value to true so we can try to query just items

05:32.930 --> 05:34.360
that aren't complete.

05:34.670 --> 05:38.520
Over in Roboam Ango we can go ahead and do just that.

05:38.540 --> 05:43.220
I'm going to write click the document and click Edit document and right here we can go ahead and edit

05:43.250 --> 05:44.300
the values.

05:44.510 --> 05:50.510
I'm going to change the completed value from false to true and then I can save the record and over inside

05:50.510 --> 05:54.140
of the terminal I can rerun the script to prove that it changed.

05:54.200 --> 06:00.350
I'm going to shut down the script by running Control-C and then I can rerun it and right here we have

06:00.350 --> 06:06.230
our two to choose one with a completed value of false and one with a completed value of true.

06:06.350 --> 06:11.870
Now by default a to do app is probably only going to show you that to Dewes you haven't completed the

06:11.870 --> 06:13.220
ones you have completed.

06:13.220 --> 06:18.000
Like walk the dog will probably be hidden although they could be accessible if you clicked about unlike

06:18.200 --> 06:19.470
Shelta news.

06:19.610 --> 06:22.640
Let's go ahead and write a query that just fetches the dues.

06:22.760 --> 06:28.670
They have a completed status set to false to get this done over inside of atom and we're going to make

06:28.670 --> 06:34.240
a change to how we call find instead of passing in zero arguments we're going to pass in one.

06:34.260 --> 06:37.620
This is what's known as our query inside of here.

06:37.640 --> 06:41.150
We can start specifying how we want to query that to dues collection.

06:41.180 --> 06:48.980
For example maybe we want to query only two Doo's that have a completed value equal to false.

06:48.980 --> 06:54.250
All we have to do to query by value is set up the key value pairs right here.

06:54.500 --> 07:00.290
If I rerun our script over in the terminal after shutting it down what do we get we get just our one

07:00.350 --> 07:01.200
to do item.

07:01.280 --> 07:06.950
We have our item with the text equal to something to do it as a completed status of false show it shows

07:06.950 --> 07:12.500
up our other to do with a text of walk the dog that is not showing up down below because that one has

07:12.500 --> 07:13.330
been completed.

07:13.430 --> 07:14.790
It doesn't match the query.

07:14.810 --> 07:17.470
So Mongo D-B does not return it.

07:17.490 --> 07:23.480
This is going to come in handy as we start querying our documents based off of completed values text

07:23.480 --> 07:25.820
properties or IDs.

07:25.970 --> 07:31.100
Let's take a quick moment to look at how we can query one of our two do's by ID.

07:31.100 --> 07:34.610
The first thing we need to do is remove everything from our query object.

07:34.610 --> 07:40.580
We no longer want to query by the completed value instead we're going to query by that underscore ID

07:40.610 --> 07:41.710
property.

07:41.780 --> 07:46.640
Now in order to illustrate this I'm going to grab the ID from the terminal of the do with the completed

07:46.640 --> 07:47.760
value of false.

07:47.810 --> 07:49.640
I'm going to copy it using a command.

07:49.640 --> 07:55.040
See if you're on a Windows or Linux you might need to right click after highlighting the ID and click

07:55.250 --> 07:56.830
copy text.

07:56.840 --> 08:02.170
And now that I have the text inside of the clipboard though I can head over to the query itself.

08:02.180 --> 08:08.780
Now if we tried to add the ID like this it is not going to work as expected because what we have inside

08:08.780 --> 08:15.560
of the ID property is not a string it's an object id which means that we need to use this object id

08:15.560 --> 08:22.070
constructor function that we imported previously in order to create an object id for the query to illustrate

08:22.070 --> 08:23.230
how that's going to happen.

08:23.360 --> 08:26.980
I'm going to go ahead and indent our object.

08:27.040 --> 08:29.950
This is going to make it a little easier to read and add it.

08:30.070 --> 08:39.670
Now that we have this in place I'm going to remove the string and call new object id just like we imported

08:39.670 --> 08:40.680
it up above.

08:40.680 --> 08:46.890
Now new object idea as we saw in the previous video it does take an argument and the ID in this case

08:46.890 --> 08:48.780
we have it stored as a string.

08:48.780 --> 08:50.970
This is going to work as expected.

08:50.970 --> 08:55.710
What we're doing here is we're querying and need to do is collection looking for any records that have

08:55.710 --> 09:00.750
an underscore ID property equal to the ID we have right here.

09:00.750 --> 09:03.170
Now I can go ahead and save this file.

09:03.330 --> 09:09.000
You give things a refreshed by running the script again and we get the same exact to do.

09:09.180 --> 09:15.810
I can go ahead and change it for the walk the dog to do by copying the string value pasting that inside

09:15.810 --> 09:19.900
of the object id constructor function and rerunning the script.

09:20.010 --> 09:24.980
When I do this I get the walk the dog to do return because that was the object ID.

09:25.020 --> 09:31.380
I queried no queering in this fashion is one of the ways we'll be using find but there are other methods

09:31.410 --> 09:34.320
other than to array that are available on our cursors.

09:34.320 --> 09:40.740
We can explore other ones by heading over to the docks for the native driver over inside of chrome and

09:40.740 --> 09:42.600
the Mongo DB docks pulled up.

09:42.630 --> 09:47.370
These are the docks I showed you how to access earlier in the section and on the left hand side we have

09:47.550 --> 09:49.130
the cursor section.

09:49.230 --> 09:54.090
If you click that we can view a list of all the methods available to us on that cursor.

09:54.090 --> 09:55.650
This is what comes back from.

09:55.650 --> 10:00.870
Find down below at the very bottom of the list we have our two array method one that we're going to

10:00.870 --> 10:04.380
look at right now is called Count up above.

10:04.380 --> 10:05.990
You can go ahead and click count.

10:06.000 --> 10:10.140
It's going to bring you to the documentation and the documentation for the native driver is actually

10:10.140 --> 10:11.100
really good.

10:11.160 --> 10:15.840
There is a complete list of all the arguments that you can provide some of them are optional some of

10:15.840 --> 10:16.870
them are required.

10:17.010 --> 10:20.230
And there is usually a real world example down below.

10:20.310 --> 10:23.520
We can figure out exactly how to use count.

10:23.520 --> 10:27.060
Now we're going to go ahead and implement count over inside of atom.

10:27.120 --> 10:32.550
What I'm going to do is take the current queery copy it to the clipboard and then comment it out.

10:32.760 --> 10:39.250
And down below I'm going to go ahead and replace our call to 2 array with a call to count.

10:39.450 --> 10:44.550
Let's go ahead and remove the query that we pass in to find what we're going to do here is count up

10:44.580 --> 10:49.980
all of the dues in the dues collection instead of having a call to array.

10:50.130 --> 10:53.280
We're going to have a call to count instead.

10:53.280 --> 11:00.150
Now as you saw inside of the examples for count they call count like this calling count passing in a

11:00.150 --> 11:04.690
callback function that gets called with an error or the actual count.

11:04.710 --> 11:10.880
You can also have a promise as the way to access that data which is exactly what we did with two array.

11:11.040 --> 11:15.300
In our case instead of passing a callback function like this we're going to use the promise.

11:15.330 --> 11:17.780
Instead we already have the promise set up.

11:17.820 --> 11:24.560
We need to do to fix this is change docs to count and then we're going to remove the console log call

11:24.570 --> 11:30.540
where we print the docs to the screen and right after we print to do's we're going to print to Dewes

11:31.290 --> 11:34.620
count with a colon passing in the value.

11:34.620 --> 11:39.210
Now this is not a template string but I am going to go ahead and swap it out with one replacing the

11:39.210 --> 11:42.270
quotes with the ticks right here.

11:42.330 --> 11:49.090
I can pass in the count awesome now that we have this in place we have a way to count up all of the

11:49.090 --> 11:53.030
to do's in the two do's collection over inside of the terminal.

11:53.030 --> 11:56.680
I'm going to go ahead and shut down our previous script or rerun it.

11:56.780 --> 11:57.620
And what do we get.

11:57.620 --> 12:01.430
We get to do is count two which is exactly correct.

12:01.580 --> 12:07.010
The cursor that we have here a call to find returns everything in the deduced collection if you count

12:07.010 --> 12:10.480
all of that up you're going to get those two to do items.

12:10.490 --> 12:12.530
Now once again count end to array.

12:12.530 --> 12:16.720
There are just a subset of all of the awesome methods you have available to you.

12:16.730 --> 12:21.320
There are entire courses on Mongo D.B and a mongo DB for node.

12:21.410 --> 12:25.850
We're not going to be using most of these methods but by now you should have a good idea about how you

12:25.850 --> 12:27.060
can implement them.

12:27.080 --> 12:29.980
Go ahead and scan the list for something that you think might be useful.

12:29.990 --> 12:33.410
Check out the examples and try to implement it in your code.

12:33.410 --> 12:38.690
Now we will be using other methods whether we use the Mongo D-B native driver or as you'll see later

12:38.900 --> 12:40.320
the library mongoose.

12:40.340 --> 12:42.510
But for now let's go ahead and do a challenge.

12:42.530 --> 12:47.470
Given what you know to get started let's head into robo Mongo.

12:47.580 --> 12:52.060
Open up the users collection and take a look at all of the documents we have inside of there.

12:52.080 --> 12:56.970
We currently have five if you don't have the exact same number or yours are a little different.

12:56.970 --> 12:58.190
That is fine.

12:58.200 --> 13:01.950
I'm going to highlight them right click them and click expand recursively.

13:01.950 --> 13:06.540
This is going to show me all of the key value pairs for each document currently.

13:06.570 --> 13:12.640
Aside from the ID they're all identical names Andrew age 25 and location is Philadelphia.

13:12.710 --> 13:15.420
I'm going to tweak the name property for two.

13:15.660 --> 13:19.900
I'm going to right click the first document and change the name to something like.

13:19.930 --> 13:25.860
John that I'll go ahead and do the same thing for the second document.

13:25.860 --> 13:30.260
I'm going to edit that document and change the name from Andrew to Mike.

13:30.270 --> 13:36.230
Now I have one document with the name of John one with Mike and three with Andrew.

13:36.240 --> 13:42.060
The challenge for you in this video is going to be to queries your users looking for all of the users

13:42.060 --> 13:45.360
with the name equal to the name you provided in the script.

13:45.390 --> 13:51.000
In this case I'm going to try to query for all documents in the users collection where name is Andrew.

13:51.030 --> 13:56.810
Then I'm going to print them into the screen and I would expect to get three back the two up above with

13:56.810 --> 14:00.690
the name of Jan and with a name of Mike should not show up.

14:00.960 --> 14:08.310
Now in order to do this all you need to do is go over to Adam comment out our previous query and add

14:08.310 --> 14:10.080
a new one down below.

14:10.140 --> 14:12.030
Take a moment to write this query.

14:12.030 --> 14:15.710
Run it from the terminal and make sure the correct number of documents returns.

14:15.720 --> 14:19.050
Remember if you didn't have 5 you might not get three.

14:19.050 --> 14:23.750
Just make sure that the data you view in Roboam mango is the data that comes back.

14:23.760 --> 14:25.860
Take a moment to knock this out test it.

14:25.860 --> 14:30.930
Pause the video and when you're done click play.

14:30.990 --> 14:31.730
How'd you do.

14:31.830 --> 14:35.600
Hopefully you were able to write that query and get the data back.

14:35.670 --> 14:39.100
If you were that is fantastic if you weren't that's also great.

14:39.120 --> 14:41.730
We're going to go ahead and do it together right now.

14:41.790 --> 14:44.520
The first thing we need to do is patch from that collection.

14:44.520 --> 14:49.470
This is going to be the user's collection as opposed to the to do's collection we've used in this video

14:50.190 --> 14:57.630
D-B Dom collection and we're looking for the users collection with an upper case you.

14:57.760 --> 15:03.940
And now we're going to go ahead and call find passing in our queery remember querying was a part of

15:03.970 --> 15:05.020
this challenge.

15:05.020 --> 15:11.690
We want to queery fetching all documents where the name lowercase N is equal to the string.

15:11.700 --> 15:13.840
Andrew upper case A.

15:13.930 --> 15:17.520
Now this is going to return the cursor in order to actually get the documents.

15:17.620 --> 15:21.750
We have to call to array just like this.

15:21.790 --> 15:28.510
We now have a promise we can attach a then call on to two array to do something with the docs.

15:28.600 --> 15:33.880
If the documents are going to come back as the first argument in our success handler and right inside

15:33.880 --> 15:37.110
of the function itself we can print the docs to the screen.

15:37.390 --> 15:40.410
I'm going to go ahead and use console dialog.

15:40.900 --> 15:45.290
Jason docstring ify passing in our three classic arguments.

15:45.290 --> 15:51.220
The object itself undefined and two for formatting were this in place.

15:51.220 --> 15:54.190
We are now done the challenge we have a query and it should work.

15:54.220 --> 15:58.710
We can test it by running it from the terminal over inside of the terminal.

15:58.720 --> 16:03.570
I'm going to go ahead and shut down the previous connection and rerun the script when I do this.

16:03.640 --> 16:04.230
What do I get.

16:04.240 --> 16:07.090
I get my three documents back.

16:07.150 --> 16:12.490
All of them have a name equal to Andrew and that is correct because of the query we set up.

16:12.490 --> 16:17.020
Notice the documents with a name equal to Mike or gen are nowhere to be found.

16:17.020 --> 16:21.370
With this in place we now know how to insert and query data from the database.

16:21.370 --> 16:25.540
Up next we're going to take a look at how we can remove and update documents.

16:25.560 --> 16:27.600
It's all coming up soon so stay tuned.

16:27.610 --> 16:29.340
I will see you next time.
