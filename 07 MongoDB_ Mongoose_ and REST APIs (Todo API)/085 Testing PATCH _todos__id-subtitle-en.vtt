WEBVTT

00:00.450 --> 00:06.330
In this video we well I guess more appropriately you are going to be writing to test cases that verify

00:06.330 --> 00:08.290
Passhe works as expected.

00:08.310 --> 00:12.330
We're going to take one to do that's not completed and make it complete and we'll take a second one

00:12.330 --> 00:15.120
that is complete and make it in complete.

00:15.150 --> 00:20.160
Now in order to do that we are going to need to tweak the seed data we have on our server test file

00:20.490 --> 00:23.060
the data are right here is to do items.

00:23.190 --> 00:28.500
Neither of them have the completed property specified which means it's going to default to false for

00:28.500 --> 00:29.350
the second item.

00:29.400 --> 00:31.010
We're going to go ahead and set.

00:31.290 --> 00:34.070
We're going to set completed equal to true.

00:34.140 --> 00:39.240
And we're also going to set completed at equal to whatever value we want.

00:39.330 --> 00:41.000
You can choose any number at all.

00:41.010 --> 00:47.250
I'm going to go ahead and use 3 3 3 and now we have 2 to do's that are going to let us toggle both ways

00:47.550 --> 00:49.290
to get started down below.

00:49.290 --> 00:51.520
I will help you create the describe it block.

00:51.540 --> 00:56.610
So we're on the same page there but you will be responsible for filling out the actual test cases.

00:56.610 --> 01:01.290
This video is basically going to be a challenge because we've done a lot of this stuff before.

01:01.290 --> 01:06.550
First up they describe a black We're going to describe this group of tests.

01:06.670 --> 01:10.850
We'll use the method followed by that you are allowed to do just that.

01:10.900 --> 01:16.500
Then we can go ahead and add our function and in here we can define our two test cases.

01:16.630 --> 01:22.150
The first test is going to take our first to do and set its text equal to something else and we'll change

01:22.150 --> 01:24.110
to complete it from false to true.

01:24.990 --> 01:32.460
It should update the to do we can provide our function with the Done argument right here and I'll leave

01:32.460 --> 01:37.170
some comments inside in just a moment to give you an idea as to how I'd like you to accomplish this.

01:37.170 --> 01:43.410
The second test is going to be for titling that second to do where the completed value is already equal

01:43.410 --> 01:43.980
to true.

01:46.130 --> 01:56.880
Right here it should clear completed at when to do is not completed.

01:56.980 --> 02:02.790
Perfect this test case is going to make sure that when we go ahead and remove the completed status setting

02:02.790 --> 02:09.330
an equal to false completed at gets cleared know for the first test case what you're going to do is

02:09.330 --> 02:17.910
grab the idea of the first item grab ID of first item and then you're going to make our patch request.

02:18.010 --> 02:22.120
You're going to provide the proper You are all with the idea inside of it and you're going to use send

02:22.180 --> 02:26.280
to send some data along as the request body for this one.

02:26.280 --> 02:33.970
I want you to update the text set it equal to whatever you like and you're going to set completed equal

02:34.000 --> 02:34.800
to true.

02:35.080 --> 02:39.250
Now once you send that off you'll be ready to make your assertions and you're going to make one assertion

02:39.280 --> 02:44.360
using the basic system assert that you get a 200 back and you're going to make one custom assertion

02:45.300 --> 02:52.540
the custom assertion is going to verify that the response body has a text property equal to the text

02:52.540 --> 02:55.640
you sent in text is changed.

02:56.080 --> 03:04.450
You're going to verify that completed is true and you're also going to verify that completed at is a

03:04.720 --> 03:12.700
number and you can use the to be a method available inside of expect to get that done.

03:12.730 --> 03:15.700
Now for the second test we're going to do something similar but we're just going to go in the other

03:15.700 --> 03:16.570
direction.

03:17.050 --> 03:27.170
We're going to grab this should be GRABBE not grad grab ID of second to do item.

03:27.310 --> 03:35.290
You're going to update the text to something different and you're going to set completed to false then

03:35.290 --> 03:36.630
you can make your assertions.

03:36.640 --> 03:42.940
Once again we will be expecting a 200 for this one and we will be expecting that the response body now

03:42.940 --> 03:48.130
represents those changes text is changed to whatever you happen to pick.

03:48.130 --> 03:52.930
I also want you to check that completed is now false.

03:52.930 --> 03:55.240
And to check that completed at

03:57.920 --> 04:06.130
is null and you can use the to not exist method available on expect to make that assertion.

04:06.140 --> 04:08.830
This is what you need to do to complete the test suite.

04:08.960 --> 04:13.710
Once you're done and wanting to run NPM test and make sure both test cases pass.

04:13.820 --> 04:17.360
If they do you're good to go if they don't go ahead and tweak things around.

04:17.390 --> 04:21.770
Feel free to use any code we wrote in any of the projects to get this challenge done.

04:21.830 --> 04:23.710
That goes with every other challenge as well.

04:23.720 --> 04:25.730
You can also use Google or stack overflow.

04:25.730 --> 04:28.130
That is not cheating it's called being resourceful.

04:28.220 --> 04:31.260
And that's what real developers do every single day.

04:31.280 --> 04:37.220
So take a moment knock this out make sure that the proper data comes back based on the data you send

04:37.220 --> 04:42.290
in and when you're done you can go ahead and click play you do.

04:42.400 --> 04:47.630
I know this one was a little open ended but hopefully you were able to get both test cases set up.

04:47.950 --> 04:52.990
Let's fill out the first test case first and I'll kick things off by grabbing the proper ID.

04:52.990 --> 05:00.130
Let's make a variable called hex ID setting it equal to the first to do's underscore ID property and

05:00.130 --> 05:03.300
we're going to call two hex string to get the string back.

05:03.310 --> 05:05.760
We can pass in to the U r l.

05:05.980 --> 05:08.500
Next up I'm going to go ahead and create some dummy text.

05:08.500 --> 05:12.040
This will be the new updated text.

05:12.060 --> 05:15.960
Let's make a variable called text and set it equal to whatever you like.

05:15.990 --> 05:20.210
This should be the new text.

05:20.220 --> 05:26.100
Now we can go ahead and actually make our request using request to our express application.

05:26.160 --> 05:27.980
We will be using the patch method.

05:28.110 --> 05:32.490
Hopefully you were able to figure that out on your own if you weren't maybe you use the documentation

05:32.490 --> 05:37.530
for super test since I did not explicitly tell you how to make that patch call.

05:37.530 --> 05:43.820
Next up we are going to be using a template string as are u r l forward slash to Doo's forward slash.

05:43.860 --> 05:45.930
Then we're going to inject the hex.

05:45.920 --> 05:47.380
I d.

05:47.400 --> 05:51.240
Now before we can make our assertions we do need to send some data along as well.

05:51.300 --> 05:53.870
So I'll call send passing in the data.

05:53.880 --> 05:57.180
This is going to be the things we want to change for this test.

05:57.180 --> 06:00.660
We did want to set completed equal to true.

06:00.810 --> 06:06.990
I'm going to set completed equal to true and we do want to update the text source at the text equal

06:06.990 --> 06:08.810
to the text variable up above.

06:08.910 --> 06:12.770
And I can always leave off this part using yes 6.

06:12.810 --> 06:16.380
Now that we have send in place we can start making our assertions.

06:16.380 --> 06:17.220
The first one is easy.

06:17.220 --> 06:19.000
We're just expecting at 200.

06:19.350 --> 06:22.980
I'm going to expect a two hundred to be the return status code.

06:22.980 --> 06:28.510
And before we add our customer assertion we can call and passing in done.

06:28.530 --> 06:34.530
Now the last thing we need to do is make those assertions about the data coming back right here.

06:34.530 --> 06:39.900
I'm going to call expect passing in a function this function as we know by now gets called with the

06:39.900 --> 06:42.900
response and we can make our custom assertions.

06:42.900 --> 06:49.180
We're going to make an assertion about text completed and completed at first up the text.

06:49.290 --> 06:59.850
We're expecting that the response dot body dot to do dot text property equals using to be the text variable.

06:59.850 --> 07:01.680
We defined up above.

07:01.680 --> 07:05.900
If this is equal to the data that came back then we're going to go next up.

07:06.060 --> 07:09.240
Let's make some assertions about that completed property.

07:09.390 --> 07:18.800
We're going to expect that the response body to do has a completed property and that it's true using

07:18.840 --> 07:20.430
to be true.

07:20.580 --> 07:21.900
We set it to true right here.

07:21.900 --> 07:25.540
So it should have changed from false to true.

07:25.560 --> 07:31.140
Now the last assertion we're going to make inside of our custom expect call is going to be an assertion

07:31.140 --> 07:40.690
about completed and making sure it's a number we're going to expect response body to do dot completed

07:40.780 --> 07:45.370
at equals a number using to be a.

07:45.940 --> 07:49.280
Inside of quotes the type number with this in place.

07:49.290 --> 07:51.490
Our first test is now complete.

07:51.610 --> 07:55.450
We can go ahead and remove those comments and actually verify it's working by running it over in the

07:55.450 --> 07:56.190
terminal.

07:56.200 --> 07:57.850
Our second test is going to fail.

07:57.910 --> 08:00.170
That's fine as long as the first one passes.

08:00.280 --> 08:02.040
We're good at to continue on.

08:02.080 --> 08:03.460
I'm going to run NPM test.

08:03.460 --> 08:05.640
This is going to fire off the test suite.

08:05.710 --> 08:08.330
We can see our first patch test succeeds.

08:08.380 --> 08:11.560
And this is the one we just filled out and our second one fails.

08:11.650 --> 08:16.060
We're getting a time out after two seconds which is expected because we never call done.

08:16.360 --> 08:20.100
Now that the first ones in place that we can go ahead and fill out the second one.

08:20.260 --> 08:24.060
Now the code for these two tasks is going to be really really similar.

08:24.070 --> 08:28.220
Now since we just wrote this code and we know exactly what it does we can copy and paste it.

08:28.240 --> 08:33.610
I'm not a fan of copying and pasting code I don't understand but I am a fan of being efficient since

08:33.610 --> 08:35.030
I know what this code does.

08:35.050 --> 08:36.770
I can paste it right in here.

08:36.880 --> 08:41.880
And now we can go ahead and make some changes instead of grabbing the hex ID for the first to do item.

08:41.980 --> 08:47.710
We want to grab the hex ID for the second to do item and then the next thing we need to do is update

08:47.830 --> 08:49.420
the data we're sending.

08:49.480 --> 08:51.160
We don't want to set completely equal to true.

08:51.160 --> 08:53.490
We already did that manually up above.

08:53.530 --> 08:56.080
This one we're trying to set to False.

08:57.620 --> 09:00.640
We are also going to update the text so we can leave that in place.

09:00.680 --> 09:05.630
I'm going to go ahead and tweak the text value a little bit adding a couple exclamation marks on the

09:05.630 --> 09:06.830
end.

09:06.830 --> 09:11.480
Next up the assertions we're still expecting a 200 to be the status code that comes back.

09:11.480 --> 09:16.350
That part's great and we are still expecting the text to equal the text for completed.

09:16.350 --> 09:21.140
So we're expecting that to be false and we're not expecting completed to be a number.

09:21.190 --> 09:25.640
It was a number originally but after this update it should have gotten cleared since the to do is no

09:25.640 --> 09:26.670
longer completed.

09:26.840 --> 09:32.530
We can use to not exist to assert that completed at it doesn't exist.

09:32.660 --> 09:38.210
With this in place our test case cases done we can now delete those comments save the file and rerun

09:38.210 --> 09:39.910
things from the terminal.

09:39.980 --> 09:41.430
I'm going to rerun the test suite.

09:41.450 --> 09:42.530
And what do we get.

09:42.560 --> 09:45.480
We get both of our patch tests passing.

09:45.560 --> 09:51.290
Now as you've probably noticed a four patch we didn't write those test cases for invalid object IDs

09:51.290 --> 09:53.150
or object IDs not found.

09:53.210 --> 09:58.630
You could add those but we've done them so many times so far I don't see that as a necessary exercise.

09:58.640 --> 10:04.940
These two test cases though they do validate that our patch method is working as expected especially

10:04.940 --> 10:10.130
when it comes to the slightly more complex logic that patch required to get everything done with this

10:10.130 --> 10:13.480
in place though we are done testing our last route.

10:13.550 --> 10:18.020
We can go ahead and make a commit and move on to the final video of the section which is coming up next

10:18.380 --> 10:19.310
over in the terminal.

10:19.310 --> 10:21.520
I'm going to run and get status here.

10:21.560 --> 10:25.580
I see I have one a modified file on my server test file which looks great.

10:25.700 --> 10:35.900
I can use get commit with the flag to make the commit add tests for Pache forward slash twos forward

10:35.900 --> 10:37.620
slash D.

10:37.730 --> 10:41.840
I'm going to go ahead and make that commit then I'll take a moment to push it up to get help.

10:41.840 --> 10:44.120
And with that in place we are done.

10:44.180 --> 10:48.650
I'll see you in the next video which is the last one for the section where you will learn how to use

10:48.650 --> 10:50.990
a separate test database locally.

10:50.990 --> 10:55.800
So you're not always wiping your data in the development database as you run your tests.

10:55.850 --> 10:57.350
That's coming up next so stay tuned.

10:57.350 --> 10:58.640
I will see you then
