WEBVTT

00:00.360 --> 00:05.950
In this video you are going to create an API route for fetching an individual to do.

00:05.970 --> 00:10.590
Now most of this video is going to be a challenge but there is one thing I want to show you before we

00:10.590 --> 00:11.340
get started.

00:11.460 --> 00:16.250
And that is how to fetch a variable that's passed in via the you are out.

00:16.350 --> 00:22.820
Now as I mentioned the structure for this you are out is going to be a GET request to forward slash

00:22.820 --> 00:23.630
to dues.

00:23.700 --> 00:29.880
Then we're going to dive into the dues fetching an individual item where the idea gets passed like this.

00:29.880 --> 00:33.580
This means that we need to make this part of the you are dynamic.

00:33.690 --> 00:39.330
I want to be able to fetch that value wherever a user happens to pass in and use it to make the query

00:39.570 --> 00:46.180
the query that we set up in mongoose queries like this one to fetch the do by ID.

00:46.230 --> 00:51.430
Now in order to get that done let's go ahead and call and get passing in.

00:51.550 --> 00:56.480
If you are out the first part we already know forward slash to Doo's forward slash.

00:56.610 --> 01:00.880
But now what we need is a u r l parameter u r l parameters.

01:00.900 --> 01:02.230
Follow this pattern.

01:02.400 --> 01:04.890
It's a colon followed by a name.

01:04.890 --> 01:11.160
Now I could call this to do ID or anything else but we're going to call it for this section is colon

01:11.220 --> 01:12.110
ID.

01:12.150 --> 01:14.650
This is going to create an ID variable.

01:14.700 --> 01:17.180
It's going to be on the request object.

01:17.220 --> 01:21.170
The one will set up in just a moment and we'll be able to access that variable.

01:21.210 --> 01:26.700
That means when someone makes this request and this callback will fire the one we're going to specify

01:26.700 --> 01:33.240
now and we'll be able to query by that ID they pass and now we are still going to get the request and

01:33.240 --> 01:34.880
response object.

01:34.890 --> 01:39.240
The only difference is we're now going to be using something off of a request.

01:39.270 --> 01:46.530
This one is request dot Puranas request pro-ams is going to be an object it's going to have key value

01:46.530 --> 01:52.470
pairs where the key is the R parameter like ID and the value is whatever value was actually put here

01:52.890 --> 01:54.400
in order to demonstrate this.

01:54.450 --> 02:03.000
I am going to simply call response send sending back the request harams object.

02:03.030 --> 02:10.050
This is going to let us test out this route inside of postman and see exactly how it works over inside

02:10.050 --> 02:12.900
of the terminal I can start up our server.

02:13.130 --> 02:19.280
I'm going to use node on server forward slash server just to start things up.

02:19.280 --> 02:23.110
Now the servers on localhost three thousand and we can make a get request to this.

02:23.110 --> 02:25.640
You are out over inside of post man.

02:25.640 --> 02:27.170
I'm going to do just that.

02:27.230 --> 02:33.940
We have the get method that you are Al is a local host and it's still on port three thousand.

02:33.950 --> 02:36.320
Forward slash to Doo's forward slash.

02:36.320 --> 02:37.670
And then we can type whatever we like.

02:37.670 --> 02:39.850
For example one two three.

02:39.950 --> 02:45.260
Now when I send this off when we get back is that request Paramo object and right here you can see it

02:45.260 --> 02:48.360
has an ID property set to 1 2 3.

02:48.380 --> 02:55.910
That means we are able to access the value here using request Dopp harams dot ID and that is exactly

02:55.910 --> 02:58.880
what you're going to need to do for the challenge.

02:58.880 --> 03:07.690
Over inside of Adam I'll start things off by creating that variable a VAR Id set equal to request dot

03:07.820 --> 03:14.450
harams dot ID with this in place you now know everything you need in order to complete the challenge

03:14.630 --> 03:17.930
which is going to be to finish filling out this route.

03:17.960 --> 03:23.670
First up youre going to validate the idea using that object ID is a valid method that we explored over

03:23.670 --> 03:28.650
in the mongooses queries file up above I'll leave a little comment here.

03:28.940 --> 03:33.620
Validate ID using is Vout.

03:33.650 --> 03:38.540
Now if it's not valid what you're going to do is stop the function execution and you're going to respond

03:38.540 --> 03:39.490
with a 4.

03:39.500 --> 03:44.400
0 4 because the ID passed in is not valid there's no way it's ever going to be in the collection.

03:44.540 --> 03:49.190
We're going to respond with a or for letting the user know that the to do was not found.

03:49.280 --> 03:56.300
And you can send back an empty body which means you can just call send without passing in any value.

03:56.300 --> 04:02.210
It would be similar to this statement with no error here and you would also change this from a 400 to

04:02.210 --> 04:03.940
a 404.

04:03.950 --> 04:06.490
Now after that you're going to start querying the database.

04:06.500 --> 04:10.120
And this is going to happen using find by ID.

04:10.250 --> 04:15.580
I want you to take this idea and query that to do collection looking for a matching document.

04:15.650 --> 04:17.290
And there's two ways this could go.

04:17.330 --> 04:22.620
There's the success case and there is the error case.

04:22.780 --> 04:28.270
If we get an error that one is pretty self-explanatory all we're going to do is send back a 400 letting

04:28.270 --> 04:31.190
the user know that the request was not valid.

04:31.300 --> 04:34.450
And we're also going to go ahead and send back nothing.

04:34.450 --> 04:39.970
We're not going to be sending back that error argument because the error that prints for this error

04:39.970 --> 04:42.550
message it could contain private information.

04:42.550 --> 04:45.940
Now we're going to be beefing out our air handling later currently.

04:45.970 --> 04:51.790
As you can see we have the function duplicated in quite a few places that will get moved into one location

04:51.790 --> 04:52.230
later.

04:52.300 --> 04:59.140
But for now you can respond with a 400 and send empty body back.

04:59.140 --> 05:01.830
This brings us to the success case.

05:02.080 --> 05:11.340
Now if there is a to do if to do you're going to go ahead and send it back if there is no to do it no

05:11.340 --> 05:15.680
to do this means the call did succeed.

05:15.750 --> 05:18.320
But the idea was not found in the collection.

05:18.420 --> 05:26.450
All you're going to do is go ahead and send back a 4 or 4 with an empty body.

05:26.460 --> 05:29.050
Now both of these statements are going to look really similar.

05:29.070 --> 05:34.560
You're sending back a 404 or letting the user know that the ID they passed in does not match any ID

05:34.710 --> 05:37.510
of a document in the to do's collection.

05:37.560 --> 05:38.980
Now you know how to do all of this.

05:39.000 --> 05:41.780
You can use anything you need to get this done.

05:41.790 --> 05:44.220
That means you can use the mongoose queries file.

05:44.220 --> 05:47.490
You can use the mongoose Jay ask.com and documentation.

05:47.490 --> 05:50.310
You can use stack overflow Google or anything else.

05:50.310 --> 05:53.550
It's not about memorizing exactly how to get stuff done.

05:53.550 --> 05:56.810
It's about working through those problems on your own.

05:56.940 --> 06:00.780
Eventually you will memorize a lot of these techniques as they come up again and again.

06:00.840 --> 06:04.560
But for now your goal is to just get it working when you're done.

06:04.560 --> 06:06.380
Go ahead and fire off this request.

06:06.390 --> 06:12.420
Over in the postman application that means you're going to want to grab an ID that is valid from robo

06:12.420 --> 06:14.630
Mongo and paste it right here.

06:14.640 --> 06:20.400
You can also test what happens with IDs that are valid but don't exist in the database and IDs that

06:20.400 --> 06:27.870
are invalid like one two three which is not a valid object id or this place you are ready to start the

06:27.870 --> 06:28.650
challenge.

06:28.710 --> 06:30.500
Take a moment to pause the video.

06:30.570 --> 06:31.440
Fill this out.

06:31.440 --> 06:31.940
Test it.

06:31.950 --> 06:32.850
Make sure it works.

06:32.850 --> 06:39.340
And when you're done go ahead and click play.

06:39.370 --> 06:40.630
How'd you do on this one.

06:40.630 --> 06:44.370
This was by far the biggest challenge I've given you but that's the goal.

06:44.410 --> 06:50.100
The goal is to start giving you more work to do on your own because that's where the real learning happens.

06:50.110 --> 06:54.490
Now the first thing I'm going to do is fill out the code for these comments right here.

06:54.520 --> 06:57.780
We're going to validate the idea and we're going to send back a 404.

06:57.790 --> 07:03.010
If it's not valid now up at the very top of the file I do not have object id imported.

07:03.010 --> 07:06.320
I'm going to have to go ahead and do that just below body parser.

07:06.430 --> 07:16.180
I can create a variable object id uppercase I uppercase D and set that equal to the return result from

07:16.180 --> 07:17.170
require.

07:17.290 --> 07:25.090
And we're requiring the Mongo NDB library now that we have object idea in place we can go ahead and

07:25.090 --> 07:26.680
use it down below.

07:26.860 --> 07:33.180
Right here we'll write an IF statement if object id dot is valid.

07:33.250 --> 07:38.020
Now obviously we only want to run this code if it's not valid it's going to flip the return result using

07:38.020 --> 07:41.700
an exclamation mark and then I'm going to pass the ID in.

07:41.740 --> 07:47.030
Now we have an IF condition that's only going to pass if the ID the one that got passed in as a D u

07:47.050 --> 07:50.260
r l parameter was not valid in that case.

07:50.260 --> 07:53.390
We're going to use return to prevent function execution.

07:53.440 --> 08:01.060
Then I'm going to go ahead and respond using response dot status setting an equal to a 4 0 4 and I'm

08:01.060 --> 08:05.660
going to call send with no arguments so I can send back an empty body.

08:05.710 --> 08:06.440
And there we go.

08:06.550 --> 08:13.030
Our first thing is complete with this in place we can now go ahead and move down below creating the

08:13.030 --> 08:13.780
query.

08:13.900 --> 08:19.030
At this point we actually do have something we can test we can pass in invalid IDs and make sure we

08:19.030 --> 08:21.900
get that 404 back over inside of the terminal.

08:21.910 --> 08:24.030
I ran the application using no demands.

08:24.040 --> 08:26.740
It automatically restarted in post man.

08:26.860 --> 08:32.300
I can rerun this request and right here we get our 404 which is fantastic.

08:32.320 --> 08:34.540
This is not a valid object ID.

08:34.570 --> 08:38.620
The condition failed and the 404 was indeed returned.

08:38.620 --> 08:46.530
Next up we're going to make that query to do a dot find by ID here.

08:46.540 --> 08:49.960
We're going to pass in the ID which we have in the ID variable.

08:50.050 --> 08:57.860
And then we're going to attach our success and error handlers then passing in our success call back.

08:57.860 --> 09:03.410
This is going to get called potentially with the individual to do document and I am going to call catch

09:03.440 --> 09:09.170
as well getting the error and we can do the air handler first if there is an error.

09:09.230 --> 09:17.760
We're going to keep things really simple response dot status setting an equal to a 400 then we're going

09:17.760 --> 09:23.010
to go ahead and call send leaving out the error object intentionally with this in place.

09:23.010 --> 09:26.370
The only thing left to do is fill out the success handler.

09:26.460 --> 09:31.230
Now the first thing we need to do is make sure that it to do is actually found this query if successful

09:31.230 --> 09:35.140
might not always result in an actual document being returned.

09:35.280 --> 09:41.100
Right here I'm going to use an IF statement to check if there is no to do if there is no to do we want

09:41.100 --> 09:44.100
to respond with a 404 just like we did up above.

09:44.400 --> 09:50.310
We're going to return to stop the function execution response dot status.

09:50.480 --> 09:56.100
The status here will be 404 and we will be using send to respond with no data.

09:56.100 --> 09:57.060
Perfect.

09:57.060 --> 10:02.220
Now that we have this case in place the last case is the happy path the success case when everything

10:02.220 --> 10:03.230
goes as planned.

10:03.240 --> 10:09.650
The idea is valid and we find a document in the dues collection that has an I.D. matching the I.D. passed

10:09.690 --> 10:10.860
in in that case.

10:10.870 --> 10:16.770
All we're going to do is respond using response and send sending back that to do.

10:16.770 --> 10:18.700
Now you could have sent it in like this.

10:18.720 --> 10:20.010
This will indeed work.

10:20.040 --> 10:25.050
But what I want to do is tweak it just a little bit instead of sending back to do as the body.

10:25.050 --> 10:31.380
I'm going to send back an object where the two do is attached as the to do property using the six object

10:31.380 --> 10:33.900
definition which is identical to this.

10:33.900 --> 10:36.020
This gives me a little flexibility down the line.

10:36.120 --> 10:41.220
I could always add other properties onto the response like custom status codes or anything else.

10:41.280 --> 10:47.190
It's similar to the technique we used up above for get to Dewes right here instead of responding with

10:47.190 --> 10:47.900
the array.

10:47.940 --> 10:53.300
We responded with an object that has to do is property and that is the array.

10:53.490 --> 10:56.960
Now that we have this in place we are done and we can test things out.

10:57.000 --> 11:01.920
I'm going to save the file remove all of our comments at a semi-colon where needed.

11:02.010 --> 11:07.820
And we're going to grab an I.D. from Roboam Mongo over inside of robo Mongo.

11:08.010 --> 11:09.980
I can grab an ID for one of my to do.

11:09.990 --> 11:11.960
I'm going to go with the second one.

11:12.120 --> 11:14.790
I'll edit the document and copy it to the clipboard.

11:15.150 --> 11:18.000
Now over in post man we can go ahead and make the request.

11:18.120 --> 11:22.130
Setting the ID equal to the ID value we just copied.

11:22.200 --> 11:23.610
I'm going to send it off and what do we get.

11:23.610 --> 11:26.460
We get our object where we have it to do property.

11:26.490 --> 11:34.020
And on that to do property we have all of the properties for the document ID text completed at and completed.

11:34.020 --> 11:40.020
Now the last case I want to test is what happens when we request a to do with a valid object id but

11:40.020 --> 11:42.010
one that just happens to not exist.

11:42.030 --> 11:48.750
I'm going to do this by taking the last number in my ID and replacing it from 9 to zero if I send this

11:48.750 --> 11:49.150
off.

11:49.200 --> 11:51.770
We get our 404 which is fantastic.

11:51.780 --> 11:57.550
This is exactly what I expect to happen when I make a request for it to do the object ID is valid.

11:57.600 --> 12:03.330
It's just not in the collection now that we've made this request we can actually save this inside of

12:03.330 --> 12:05.420
our to do app collection.

12:05.460 --> 12:11.790
So later down the line it's a lot easier to fire off this one I'm going to save it using Save As we

12:11.790 --> 12:18.240
can leave the description empty and we can change the name to get forward slash to Dewes forward slash

12:18.270 --> 12:19.680
colon ID.

12:19.770 --> 12:21.990
And I am going to add it to our existing collection.

12:22.000 --> 12:24.350
Need to do app collection.

12:24.480 --> 12:26.150
Now we have three routes.

12:26.160 --> 12:30.330
The only thing left to do for this route is to add some test cases and that's going to be the topic

12:30.330 --> 12:32.190
of the next video to wrap this one up.

12:32.190 --> 12:36.590
Let's commit our changes and push them up to get up.

12:36.740 --> 12:39.950
I'm going to shut down the server and run and get status.

12:39.950 --> 12:42.120
Here we see we have our modified file.

12:42.140 --> 12:47.720
This means I can run and get commit with the a flag and the flag and then I'm going to provide a my

12:47.720 --> 12:49.220
commit message.

12:49.220 --> 12:55.130
Now if you're using a flag and the flag you can actually use a shortcut the AM flag which does the exact

12:55.130 --> 12:55.750
same thing.

12:55.940 --> 12:58.920
It's going out all of our modified files to the commit.

12:58.940 --> 13:06.640
It's also going to give us a place to add a message a good message for this one would be ADD get to

13:06.700 --> 13:08.520
do's ID.

13:08.620 --> 13:09.380
Excellent.

13:09.400 --> 13:11.360
With this in place I'm going to make the commit.

13:11.410 --> 13:12.300
Push it up to get help.

13:12.310 --> 13:13.450
And we are done.

13:13.490 --> 13:18.840
I will see you next time where we are going to go ahead and write test cases for this route.

13:18.850 --> 13:21.320
It's going to be mostly a challenge like this one was.

13:21.400 --> 13:22.750
So get ready for it.

13:22.750 --> 13:23.560
Stay tuned.

13:23.650 --> 13:25.120
I will see you them
